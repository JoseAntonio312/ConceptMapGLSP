"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GLSPSaveable = void 0;
/********************************************************************************
 * Copyright (c) 2019-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const client_1 = require("@eclipse-glsp/client");
const core_1 = require("@theia/core");
/**
 * The default {@link Saveable} implementation of the `GLSPDiagramWidget`.
 * Supports `afterDelay` autosave functionality. Other  autosave types (`onWindowChange`|`onFocusChange`)
 * are not supported. If the `autoSaveType` is set to an unsupported value the `afterDelay` save strategy will
 * be used.
 */
class GLSPSaveable {
    get onDirtyChanged() {
        return this.onDirtyChangedEmitter.event;
    }
    constructor(actionDispatcher, editorContextService) {
        this.actionDispatcher = actionDispatcher;
        this.editorContextService = editorContextService;
        this._autoSave = 'off';
        this.autoSaveDelay = 500;
        this.autoSaveJobs = new core_1.DisposableCollection();
        this.toDispose = new core_1.DisposableCollection();
        this.onDirtyChangedEmitter = new core_1.Emitter();
        this.toDispose.pushAll([
            this.editorContextService.onDirtyStateChanged(change => this.handleDirtyStateChange(change)),
            this.onDirtyChangedEmitter,
            this.autoSaveJobs
        ]);
    }
    handleDirtyStateChange(change) {
        this.onDirtyChangedEmitter.fire(undefined);
        if (change.isDirty) {
            this.scheduleAutoSave();
        }
    }
    save() {
        if (this.editorContextService.isDirty) {
            return this.actionDispatcher.dispatch(client_1.SaveModelAction.create());
        }
    }
    get dirty() {
        return this.editorContextService.isDirty;
    }
    set autoSave(autoSave) {
        this._autoSave = autoSave;
        if (this.shouldAutoSave) {
            this.scheduleAutoSave();
        }
        else {
            this.autoSaveJobs.dispose();
        }
    }
    get autoSave() {
        return this._autoSave;
    }
    scheduleAutoSave() {
        if (this.shouldAutoSave) {
            this.autoSaveJobs.dispose();
            const autoSaveJob = window.setTimeout(() => this.doAutoSave(), this.autoSaveDelay);
            const disposableAutoSaveJob = core_1.Disposable.create(() => window.clearTimeout(autoSaveJob));
            this.autoSaveJobs.push(disposableAutoSaveJob);
        }
    }
    doAutoSave() {
        if (this.shouldAutoSave) {
            this.save();
        }
    }
    get shouldAutoSave() {
        return this.dirty && this.autoSave !== 'off';
    }
    // Needs to be implemented to pass the type check of `WorkspaceFrontendContribution.canBeSaved`.
    async revert(options) {
        console.log('GLSP only supports server-side saving. The `revert` implementation is no-op and has no effect.');
    }
    // Needs to be implemented to pass the type check of `WorkspaceFrontendContribution.canBeSaved`.
    createSnapshot() {
        throw new Error('GLSP only supports server-side saving. `createSnapshot` should never be invoked');
    }
    dispose() {
        this.toDispose.dispose();
    }
}
exports.GLSPSaveable = GLSPSaveable;
//# sourceMappingURL=glsp-saveable.js.map
/********************************************************************************
 * Copyright (c) 2019-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { DirtyStateChange, EditorContextService, GLSPActionDispatcher } from '@eclipse-glsp/client';
import { Disposable, DisposableCollection, Emitter, Event, MaybePromise } from '@theia/core';
import { Saveable } from '@theia/core/lib/browser';
type AutoSaveType = 'off' | 'afterDelay' | 'onFocusChange' | 'onWindowChange';
/**
 * The default {@link Saveable} implementation of the `GLSPDiagramWidget`.
 * Supports `afterDelay` autosave functionality. Other  autosave types (`onWindowChange`|`onFocusChange`)
 * are not supported. If the `autoSaveType` is set to an unsupported value the `afterDelay` save strategy will
 * be used.
 */
export declare class GLSPSaveable implements Saveable, Disposable {
    protected actionDispatcher: GLSPActionDispatcher;
    protected editorContextService: EditorContextService;
    protected _autoSave: AutoSaveType;
    autoSaveDelay: number;
    protected autoSaveJobs: DisposableCollection;
    protected toDispose: DisposableCollection;
    readonly onDirtyChangedEmitter: Emitter<void>;
    get onDirtyChanged(): Event<void>;
    constructor(actionDispatcher: GLSPActionDispatcher, editorContextService: EditorContextService);
    protected handleDirtyStateChange(change: DirtyStateChange): void;
    save(): MaybePromise<void>;
    get dirty(): boolean;
    set autoSave(autoSave: AutoSaveType);
    get autoSave(): AutoSaveType;
    protected scheduleAutoSave(): void;
    protected doAutoSave(): void;
    protected get shouldAutoSave(): boolean;
    revert(options?: Saveable.RevertOptions): Promise<void>;
    createSnapshot(): Saveable.Snapshot;
    dispose(): void;
}
export {};
//# sourceMappingURL=glsp-saveable.d.ts.map
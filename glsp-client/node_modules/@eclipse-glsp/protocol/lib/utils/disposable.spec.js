"use strict";
/********************************************************************************
 * Copyright (c) 2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const sinon = require("sinon");
const disposable_1 = require("./disposable");
describe('Disposable', () => {
    describe('is', () => {
        it('should return false for a primitive', () => {
            (0, chai_1.expect)(disposable_1.Disposable.is('A')).to.be.false;
        });
        it('should return false for unknown function', () => {
            (0, chai_1.expect)(disposable_1.Disposable.is('A'.toString)).to.be.false;
        });
        it('should return true for the return value of Disposable.create()', () => {
            (0, chai_1.expect)(disposable_1.Disposable.is(disposable_1.Disposable.create(() => 'A'.toString()))).to.be.true;
        });
        it('should return true for the return value of Disposable.empty()', () => {
            (0, chai_1.expect)(disposable_1.Disposable.is(disposable_1.Disposable.empty())).to.be.true;
        });
        it('should return false for an object with conflicting `dispose` property', () => {
            const obj = { dispose: '' };
            (0, chai_1.expect)(disposable_1.Disposable.is(obj)).to.be.false;
        });
        it('disposable object', () => {
            const obj = { dispose: () => 'ok' };
            (0, chai_1.expect)(disposable_1.Disposable.is(obj)).to.be.true;
        });
    });
    describe('DisposableCollection', () => {
        let disposableCollection;
        beforeEach(() => (disposableCollection = new disposable_1.DisposableCollection()));
        describe('push', () => {
            it('should add one disposable to the collection and remove it again', () => {
                const disposable = disposable_1.Disposable.empty();
                const toRemove = disposableCollection.push(disposable);
                (0, chai_1.expect)(disposableCollection['disposables'].length).to.be.equal(1);
                (0, chai_1.expect)(disposableCollection['disposables'][0]).to.equal(disposable);
                toRemove.dispose();
                (0, chai_1.expect)(disposableCollection['disposables'].length).to.be.equal(0);
            });
            it('should add multiple disposable to the collection and remove them again', () => {
                const disposable1 = disposable_1.Disposable.empty();
                const disposable2 = disposable_1.Disposable.empty();
                const disposable3 = disposable_1.Disposable.empty();
                const toRemove = disposableCollection.push(disposable1, disposable2, disposable3);
                (0, chai_1.expect)(disposableCollection['disposables'].length).to.be.equal(3);
                (0, chai_1.expect)(disposableCollection['disposables'][0]).to.equal(disposable1);
                (0, chai_1.expect)(disposableCollection['disposables'][1]).to.equal(disposable2);
                (0, chai_1.expect)(disposableCollection['disposables'][2]).to.equal(disposable3);
                toRemove.dispose();
                (0, chai_1.expect)(disposableCollection['disposables'].length).to.be.equal(0);
            });
        });
        describe('dispose', () => {
            describe('should invoke dispose on all elements of the collection exactly once', () => {
                const disposable1 = disposable_1.Disposable.empty();
                const disposable2 = disposable_1.Disposable.empty();
                const disposable1Spy = sinon.spy(disposable1);
                const disposable2Spy = sinon.spy(disposable2);
                disposableCollection = new disposable_1.DisposableCollection(disposable1, disposable2);
                disposableCollection.dispose();
                disposableCollection.dispose();
                disposableCollection.dispose();
                (0, chai_1.expect)(disposable1Spy.dispose.calledOnce).to.be.true;
                (0, chai_1.expect)(disposable2Spy.dispose.calledOnce).to.be.true;
                (0, chai_1.expect)(disposableCollection['disposables'].length).to.be.equal(0);
            });
        });
    });
});
//# sourceMappingURL=disposable.spec.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/********************************************************************************
 * Copyright (c) 2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/* eslint-disable @typescript-eslint/no-empty-function */
const chai_1 = require("chai");
const inversify_1 = require("inversify");
const di_util_1 = require("./di-util");
describe('DI Utils', () => {
    describe('FeatureModule', () => {
        const container = new inversify_1.Container();
        const moduleA = new di_util_1.FeatureModule(() => { });
        const moduleB = new di_util_1.FeatureModule(() => { });
        afterEach(() => {
            container.unbindAll();
        });
        describe('No or single required module', () => {
            it('Should load a feature module with no required module', () => {
                const moduleWithNoRequirements = new di_util_1.FeatureModule(bind => {
                    bind('Foo').toConstantValue('Foo');
                });
                container.load(moduleWithNoRequirements);
                (0, chai_1.expect)(container.isBound(moduleWithNoRequirements.featureId)).to.be.true;
                (0, chai_1.expect)(container.isBound('Foo')).to.be.true;
            });
            it('Should load a feature module with met required module', () => {
                const moduleWithNoRequirements = new di_util_1.FeatureModule(bind => {
                    bind('Foo').toConstantValue('Foo');
                }, { requires: moduleA });
                container.load(moduleA, moduleWithNoRequirements);
                (0, chai_1.expect)(container.isBound(moduleA.featureId)).to.be.true;
                (0, chai_1.expect)(container.isBound(moduleWithNoRequirements.featureId)).to.be.true;
                (0, chai_1.expect)(container.isBound('Foo')).to.be.true;
            });
            it('Should not load a feature module if required module is loaded afterwards', () => {
                const moduleWithNoRequirements = new di_util_1.FeatureModule(bind => {
                    bind('Foo').toConstantValue('Foo');
                }, { requires: moduleA });
                container.load(moduleWithNoRequirements, moduleA);
                (0, chai_1.expect)(container.isBound(moduleA.featureId)).to.be.true;
                (0, chai_1.expect)(container.isBound(moduleWithNoRequirements.featureId)).to.be.false;
                (0, chai_1.expect)(container.isBound('Foo')).to.be.false;
            });
            it('Should not load a feature module with missing required module', () => {
                const moduleWithUnmetRequirements = new di_util_1.FeatureModule(bind => {
                    bind('Foo').toConstantValue('Foo');
                }, { requires: moduleA });
                container.load(moduleWithUnmetRequirements);
                (0, chai_1.expect)(container.isBound(moduleWithUnmetRequirements.featureId)).to.be.false;
                (0, chai_1.expect)(container.isBound('Foo')).to.be.false;
            });
        });
        describe('Multiple required modules', () => {
            it('Should load feature module with loaded required modules', () => {
                const moduleWithUnmetRequirements = new di_util_1.FeatureModule(bind => {
                    bind('Foo').toConstantValue('Foo');
                }, { requires: [moduleA, moduleB] });
                container.load(moduleA, moduleWithUnmetRequirements);
                (0, chai_1.expect)(container.isBound(moduleA.featureId)).to.be.true;
                (0, chai_1.expect)(container.isBound(moduleWithUnmetRequirements.featureId)).to.be.false;
                (0, chai_1.expect)(container.isBound('Foo')).to.be.false;
            });
        });
        it('Should not load a feature module with missing required modules', () => {
            const moduleWithUnmetRequirements = new di_util_1.FeatureModule(bind => {
                bind('Foo').toConstantValue('Foo');
            }, { requires: [moduleA, moduleB] });
            container.load(moduleWithUnmetRequirements);
            (0, chai_1.expect)(container.isBound(moduleWithUnmetRequirements.featureId)).to.be.false;
            (0, chai_1.expect)(container.isBound('Foo')).to.be.false;
        });
        it('Should not load a feature module with partially loaded required modules', () => {
            const moduleWithUnmetRequirements = new di_util_1.FeatureModule(bind => {
                bind('Foo').toConstantValue('Foo');
            }, { requires: [moduleA, moduleB] });
            container.load(moduleA, moduleWithUnmetRequirements);
            (0, chai_1.expect)(container.isBound(moduleA.featureId)).to.be.true;
            (0, chai_1.expect)(container.isBound(moduleWithUnmetRequirements.featureId)).to.be.false;
            (0, chai_1.expect)(container.isBound('Foo')).to.be.false;
        });
    });
});
//# sourceMappingURL=di-util.spec.js.map
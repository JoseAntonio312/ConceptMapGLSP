"use strict";
/********************************************************************************
 * Copyright (c) 2017-2023 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GLSPProjectionView = void 0;
const inversify_1 = require("inversify");
const snabbdom_1 = require("snabbdom");
const sprotty_1 = require("@eclipse-glsp/sprotty");
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const JSX = { createElement: sprotty_1.html };
/**
 * Special viewport root view that renders horizontal and vertical projection bars for quick navigation.
 */
let GLSPProjectionView = class GLSPProjectionView extends sprotty_1.ProjectedViewportView {
    render(model, context, args) {
        const svgElem = this.renderSvg(model, context, args);
        if (svgElem.data) {
            svgElem.data.class = { 'sprotty-graph': true };
        }
        const rootNode = (JSX.createElement("div", { "class-sprotty-graph": false, style: { width: '100%', height: '100%' } },
            svgElem,
            this.renderProjections(model, context, args)));
        (0, sprotty_1.setAttr)(rootNode, 'tabindex', 1);
        (0, sprotty_1.setAttr)(rootNode, 'aria-label', 'Diagram');
        return rootNode;
    }
    renderSvg(model, context, args) {
        const edgeRouting = this.edgeRouterRegistry.routeAllChildren(model);
        const transform = `scale(${model.zoom}) translate(${-model.scroll.x},${-model.scroll.y})`;
        const ns = 'http://www.w3.org/2000/svg';
        const svg = (0, snabbdom_1.h)('svg', { ns, style: { height: '100%' } }, (0, snabbdom_1.h)('g', { ns, attrs: { transform } }, context.renderChildren(model, { edgeRouting })));
        return svg;
    }
    renderProjectionBar(projections, model, modelBounds, orientation) {
        const params = { modelBounds, orientation };
        // NOTE: Here we assume that the projection bars have the same size as the diagram canvas,
        // i.e. they are drawn as overlay above the canvas.
        params.factor =
            orientation === 'horizontal' ? model.canvasBounds.width / modelBounds.width : model.canvasBounds.height / modelBounds.height;
        params.zoomedFactor = params.factor / model.zoom;
        return (JSX.createElement("div", { "class-sprotty-projection-bar": true, "class-horizontal": orientation === 'horizontal', "class-vertical": orientation === 'vertical', "class-bordered-projection-bar": true },
            this.renderViewport(model, params),
            projections.map(p => this.renderProjection(p, model, params))));
    }
    renderViewport(model, params) {
        let canvasSize;
        let viewportPos;
        if (params.orientation === 'horizontal') {
            canvasSize = model.canvasBounds.width;
            viewportPos = (model.scroll.x - params.modelBounds.x) * params.factor;
        }
        else {
            canvasSize = model.canvasBounds.height;
            viewportPos = (model.scroll.y - params.modelBounds.y) * params.factor;
        }
        let viewportSize = canvasSize * params.zoomedFactor;
        if (viewportPos < 0) {
            viewportSize += viewportPos;
            viewportPos = 0;
        }
        else if (viewportPos > canvasSize) {
            viewportPos = canvasSize;
        }
        if (viewportSize < 0) {
            viewportSize = 0;
        }
        else if (viewportPos + viewportSize > canvasSize) {
            viewportSize = canvasSize - viewportPos;
        }
        if (Math.abs(viewportSize - canvasSize) < 1) {
            viewportSize = 0;
        }
        const style = params.orientation === 'horizontal'
            ? {
                left: `${viewportPos}px`,
                width: `${viewportSize}px`,
                border: 'none'
            }
            : {
                top: `${viewportPos}px`,
                height: `${viewportSize}px`,
                border: 'none'
            };
        return JSX.createElement("div", { "class-sprotty-viewport": viewportSize !== 0, "class-projection-scroll-bar": true, style: style });
    }
    renderProjection(projection, model, params) {
        let canvasSize;
        let projPos;
        let projSize;
        if (params.orientation === 'horizontal') {
            canvasSize = model.canvasBounds.width;
            projPos = (projection.projectedBounds.x - params.modelBounds.x) * params.factor;
            projSize = projection.projectedBounds.width * params.factor;
        }
        else {
            canvasSize = model.canvasBounds.height;
            projPos = (projection.projectedBounds.y - params.modelBounds.y) * params.factor;
            projSize = projection.projectedBounds.height * params.factor;
        }
        if (projPos < 0) {
            projSize += projPos;
            projPos = 0;
        }
        else if (projPos > canvasSize) {
            projPos = canvasSize;
        }
        if (projSize < 0) {
            projSize = 0;
        }
        else if (projPos + projSize > canvasSize) {
            projSize = canvasSize - projPos;
        }
        const style = params.orientation === 'horizontal'
            ? {
                left: `${projPos}px`,
                width: `${projSize}px`,
                height: '60%'
            }
            : {
                top: `${projPos}px`,
                height: `${projSize}px`,
                width: '60%'
            };
        const result = (JSX.createElement("div", { id: `${params.orientation}-projection:${projection.elementId}`, "class-sprotty-projection": true, "class-glsp-projection": true, style: style }));
        projection.cssClasses.forEach(cl => (0, sprotty_1.setClass)(result, cl, true));
        return result;
    }
};
exports.GLSPProjectionView = GLSPProjectionView;
__decorate([
    (0, inversify_1.inject)(sprotty_1.EdgeRouterRegistry),
    __metadata("design:type", sprotty_1.EdgeRouterRegistry)
], GLSPProjectionView.prototype, "edgeRouterRegistry", void 0);
exports.GLSPProjectionView = GLSPProjectionView = __decorate([
    (0, inversify_1.injectable)()
], GLSPProjectionView);
//# sourceMappingURL=glsp-projection-view.js.map
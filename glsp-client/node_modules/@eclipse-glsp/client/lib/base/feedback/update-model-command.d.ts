import { ActionHandlerRegistry, Animation, Command, CommandExecutionContext, CommandReturn, ILogger, GModelRoot, UpdateAnimationData, UpdateModelAction, UpdateModelCommand } from '@eclipse-glsp/sprotty';
import { IFeedbackActionDispatcher } from './feedback-action-dispatcher';
import { FeedbackCommand } from './feedback-command';
/**
 * A special {@link UpdateModelCommand} that retrieves all registered {@link Action}s from the {@link IFeedbackActionDispatcher}
 * (if present) and applies their feedback to the `newRoot` before performing the update. This enables persistent client-side feedback
 * across model updates initiated by the GLSP server.
 */
export declare class FeedbackAwareUpdateModelCommand extends UpdateModelCommand {
    protected logger: ILogger;
    protected feedbackActionDispatcher: IFeedbackActionDispatcher;
    protected actionHandlerRegistry?: ActionHandlerRegistry;
    constructor(action: UpdateModelAction, actionHandlerRegistryProvider: () => Promise<ActionHandlerRegistry>);
    protected performUpdate(oldRoot: GModelRoot, newRoot: GModelRoot, context: CommandExecutionContext): CommandReturn;
    protected getFeedbackCommands(registry: ActionHandlerRegistry): Command[];
    protected getPriority(command: Partial<FeedbackCommand>): number;
    protected createAnimations(data: UpdateAnimationData, root: GModelRoot, context: CommandExecutionContext): Animation[];
}
//# sourceMappingURL=update-model-command.d.ts.map
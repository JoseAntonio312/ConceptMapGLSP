"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeedbackActionDispatcher = void 0;
/********************************************************************************
 * Copyright (c) 2019-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const inversify_1 = require("inversify");
const sprotty_1 = require("@eclipse-glsp/sprotty");
let FeedbackActionDispatcher = class FeedbackActionDispatcher {
    constructor() {
        this.registeredFeedback = new Map();
    }
    registerFeedback(feedbackEmitter, feedbackActions, cleanupActions) {
        if (feedbackActions.length > 0) {
            this.registeredFeedback.set(feedbackEmitter, feedbackActions);
            this.dispatchFeedback(feedbackActions, feedbackEmitter);
        }
        return sprotty_1.Disposable.create(() => this.deregisterFeedback(feedbackEmitter, cleanupActions));
    }
    deregisterFeedback(feedbackEmitter, cleanupActions) {
        this.registeredFeedback.delete(feedbackEmitter);
        if (cleanupActions && cleanupActions.length > 0) {
            this.dispatchFeedback(cleanupActions, feedbackEmitter);
        }
    }
    getRegisteredFeedback() {
        const result = [];
        this.registeredFeedback.forEach(actions => result.push(...actions));
        return result;
    }
    getRegisteredFeedbackEmitters(action) {
        const result = [];
        this.registeredFeedback.forEach((actions, emitter) => {
            if (actions.includes(action)) {
                result.push(emitter);
            }
        });
        return result;
    }
    async dispatchFeedback(actions, feedbackEmitter) {
        try {
            const actionDispatcher = await this.actionDispatcher();
            await actionDispatcher.dispatchAll(actions);
            this.logger.info(this, `Dispatched feedback actions for ${feedbackEmitter}`);
        }
        catch (reason) {
            this.logger.error(this, 'Failed to dispatch feedback actions', reason);
        }
    }
};
exports.FeedbackActionDispatcher = FeedbackActionDispatcher;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcherProvider),
    __metadata("design:type", Function)
], FeedbackActionDispatcher.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ILogger),
    __metadata("design:type", Object)
], FeedbackActionDispatcher.prototype, "logger", void 0);
exports.FeedbackActionDispatcher = FeedbackActionDispatcher = __decorate([
    (0, inversify_1.injectable)()
], FeedbackActionDispatcher);
//# sourceMappingURL=feedback-action-dispatcher.js.map
import { Action, CommandExecutionContext, GModelElement, GModelRoot } from '@eclipse-glsp/sprotty';
import { FeedbackCommand } from './feedback-command';
export interface ModifyCSSFeedbackAction extends Action {
    kind: typeof ModifyCSSFeedbackAction.KIND;
    elementIds?: string[];
    add?: string[];
    remove?: string[];
}
export declare namespace ModifyCSSFeedbackAction {
    const KIND = "modifyCSSFeedback";
    function is(object: any): object is ModifyCSSFeedbackAction;
    function create(options: {
        elements?: (string | GModelElement)[];
        add?: string[];
        remove?: string[];
    }): ModifyCSSFeedbackAction;
}
export declare class ModifyCssFeedbackCommand extends FeedbackCommand {
    readonly action: ModifyCSSFeedbackAction;
    static readonly KIND = "modifyCSSFeedback";
    constructor(action: ModifyCSSFeedbackAction);
    execute(context: CommandExecutionContext): GModelRoot;
}
export declare enum CursorCSS {
    DEFAULT = "default-mode",
    OVERLAP_FORBIDDEN = "overlap-forbidden-mode",
    NODE_CREATION = "node-creation-mode",
    EDGE_CREATION_SOURCE = "edge-creation-select-source-mode",
    EDGE_CREATION_TARGET = "edge-creation-select-target-mode",
    EDGE_RECONNECT = "edge-reconnect-select-target-mode",
    EDGE_CHECK_PENDING = "edge-check-pending-mode",
    OPERATION_NOT_ALLOWED = "edge-modification-not-allowed-mode",
    ELEMENT_DELETION = "element-deletion-mode",
    RESIZE_NESW = "resize-nesw-mode",
    RESIZE_NWSE = "resize-nwse-mode",
    MOVE = "move-mode",
    MARQUEE = "marquee-mode"
}
export declare function cursorFeedbackAction(cursorCss?: CursorCSS): ModifyCSSFeedbackAction;
export declare function applyCssClasses(element: GModelElement, ...add: string[]): ModifyCSSFeedbackAction;
export declare function deleteCssClasses(element: GModelElement, ...remove: string[]): ModifyCSSFeedbackAction;
//# sourceMappingURL=css-feedback.d.ts.map
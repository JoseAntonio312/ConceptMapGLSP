import { Action, Args, Disposable, DisposableCollection, EditorContext, Emitter, Event, IActionHandler, MaybePromise, MousePositionTracker, GModelElement, GModelRoot, SetDirtyStateAction, SetEditModeAction, ValueChange } from '@eclipse-glsp/sprotty';
import { GLSPActionDispatcher } from './action-dispatcher';
import { IDiagramOptions, IDiagramStartup } from './model/diagram-loader';
import { SelectionService } from './selection-service';
export interface IEditModeListener {
    editModeChanged(newValue: string, oldValue: string): void;
}
export type DirtyStateChange = Pick<SetDirtyStateAction, 'isDirty' | 'reason'>;
/**
 * The `EditorContextService` is a central injectable component that gives read-only access to
 * certain aspects of the diagram, such as the currently selected elements, the model root,
 * the edit mode, the latest position of the mouse in the diagram.
 *
 * It has been introduced for two main reasons:
 * 1. to simplify accessing the model root and the current selection from components that are
 *    not commands,
 * 2. to conveniently create an EditorContext, which is a context object sent as part of several
 *    actions to the server to describe the current state of the editor (selection, last mouse
 *    position, etc.).
 */
export declare class EditorContextService implements IActionHandler, Disposable, IDiagramStartup {
    protected selectionService: SelectionService;
    protected mousePositionTracker: MousePositionTracker;
    protected diagramOptions: IDiagramOptions;
    protected editModeListeners: IEditModeListener[];
    protected actionDispatcher: GLSPActionDispatcher;
    protected _editMode: string;
    protected onEditModeChangedEmitter: Emitter<ValueChange<string>>;
    get onEditModeChanged(): Event<ValueChange<string>>;
    protected _isDirty: boolean;
    protected onDirtyStateChangedEmitter: Emitter<DirtyStateChange>;
    get onDirtyStateChanged(): Event<DirtyStateChange>;
    protected toDispose: DisposableCollection;
    protected initialize(): void;
    dispose(): void;
    get(args?: Args): EditorContext;
    getWithSelection(selectedElementIds: string[], args?: Args): EditorContext;
    handle(action: Action): void;
    protected handleSetEditModeAction(action: SetEditModeAction): void;
    protected handleSetDirtyStateAction(action: SetDirtyStateAction): void;
    get sourceUri(): string | undefined;
    get editMode(): string;
    get diagramType(): string;
    get clientId(): string;
    get modelRoot(): Readonly<GModelRoot>;
    get selectedElements(): Readonly<GModelElement>[];
    get isReadonly(): boolean;
    get isDirty(): boolean;
    postRequestModel(): MaybePromise<void>;
}
export type EditorContextServiceProvider = () => Promise<EditorContextService>;
//# sourceMappingURL=editor-context-service.d.ts.map
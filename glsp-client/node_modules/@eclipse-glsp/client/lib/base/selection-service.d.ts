import { Action, Command, CommandExecutionContext, Disposable, DisposableCollection, Emitter, Event, ILogger, GModelElement, GModelRoot, SelectAction, SelectAllAction, Selectable } from '@eclipse-glsp/sprotty';
import { ISModelRootListener } from './command-stack';
import { IFeedbackActionDispatcher } from './feedback/feedback-action-dispatcher';
export interface ISelectionListener {
    selectionChanged(root: Readonly<GModelRoot>, selectedElements: string[], deselectedElements?: string[]): void;
}
export interface SelectionChange {
    root: Readonly<GModelRoot>;
    selectedElements: string[];
    deselectedElements: string[];
}
export declare class SelectionService implements ISModelRootListener, Disposable {
    protected root: Readonly<GModelRoot>;
    protected selectedElementIDs: Set<string>;
    protected feedbackDispatcher: IFeedbackActionDispatcher;
    protected logger: ILogger;
    protected selectionListeners: ISelectionListener[];
    protected toDispose: DisposableCollection;
    protected initialize(): void;
    dispose(): void;
    protected onSelectionChangedEmitter: Emitter<SelectionChange>;
    get onSelectionChanged(): Event<SelectionChange>;
    modelRootChanged(root: Readonly<GModelRoot>): void;
    updateSelection(root: Readonly<GModelRoot>, select: string[], deselect: string[]): void;
    dispatchFeedback(actions: Action[]): void;
    notifyListeners(root: GModelRoot, selectedElementIDs: Set<string>, deselectedElementIDs: Set<string>): void;
    getModelRoot(): Readonly<GModelRoot>;
    getSelectedElements(): Readonly<GModelElement & Selectable>[];
    /**
     * QUERY METHODS
     */
    getSelectedElementIDs(): string[];
    hasSelectedElements(): boolean;
    isSingleSelection(): boolean;
    isMultiSelection(): boolean;
}
/**
 * Handles a {@link SelectAction} and propagates the new selection to the {@link SelectionService}.
 * Other tools might be selection-sensitive which means {@link SelectAction}s must be processed as fast as possible.
 * Handling the action with a command ensures that the action is processed before the next render tick.
 */
export declare class SelectCommand extends Command {
    action: SelectAction;
    selectionService: SelectionService;
    static readonly KIND = "elementSelected";
    protected selected: GModelElement[];
    protected deselected: GModelElement[];
    constructor(action: SelectAction, selectionService: SelectionService);
    execute(context: CommandExecutionContext): GModelRoot;
    undo(context: CommandExecutionContext): GModelRoot;
    redo(context: CommandExecutionContext): GModelRoot;
}
/**
 * Handles a {@link SelectAllAction} and propagates the new selection to the {@link SelectionService}.
 * Other tools might be selection-sensitive which means {@link SelectionAllAction}s must be processed as fast as possible.
 * Handling the action with a command ensures that the action is processed before the next render tick.
 */
export declare class SelectAllCommand extends Command {
    action: SelectAllAction;
    selectionService: SelectionService;
    static readonly KIND = "allSelected";
    protected previousSelection: Map<string, boolean>;
    constructor(action: SelectAllAction, selectionService: SelectionService);
    execute(context: CommandExecutionContext): GModelRoot;
    undo(context: CommandExecutionContext): GModelRoot;
    redo(context: CommandExecutionContext): GModelRoot;
}
export interface SelectFeedbackAction extends Omit<SelectAction, 'kind'>, Action {
    kind: typeof SelectFeedbackAction.KIND;
}
export declare namespace SelectFeedbackAction {
    const KIND = "selectFeedback";
    function is(object: any): object is SelectFeedbackAction;
    function create(options?: {
        selectedElementsIDs?: string[];
        deselectedElementsIDs?: string[] | boolean;
    }): SelectFeedbackAction;
    function addSelection(selectedElementsIDs: string[]): SelectFeedbackAction;
    function removeSelection(deselectedElementsIDs: string[]): SelectFeedbackAction;
    function setSelection(selectedElementsIDs: string[]): SelectFeedbackAction;
}
//# sourceMappingURL=selection-service.d.ts.map
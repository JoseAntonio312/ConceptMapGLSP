"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/********************************************************************************
 * Copyright (c) 2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const chai_1 = require("chai");
const inversify_1 = require("inversify");
require("reflect-metadata");
const sinon = require("sinon");
const sprotty_1 = require("@eclipse-glsp/sprotty");
const model_initialization_constraint_1 = require("./model-initialization-constraint");
const sandbox = sinon.createSandbox();
const container = new inversify_1.Container();
let constraint;
// eslint-disable-next-line @typescript-eslint/no-empty-function
const listener = sandbox.spy(() => { });
describe('DefaultModelInitializationConstraint', () => {
    beforeEach(() => {
        constraint = container.resolve(model_initialization_constraint_1.DefaultModelInitializationConstraint);
        sandbox.reset();
    });
    it('should complete after dispatching  non empty SetModelAction and `InitializeCanvasBoundsAction`', () => {
        (0, chai_1.expect)(constraint.isCompleted).to.be.false;
        constraint.notifyDispatched(sprotty_1.SetModelAction.create({ id: 'model', type: 'graph' }));
        (0, chai_1.expect)(constraint.isCompleted).to.be.false;
        constraint.notifyDispatched({ kind: sprotty_1.InitializeCanvasBoundsAction.KIND });
        (0, chai_1.expect)(constraint.isCompleted).to.be.true;
    });
    it('should complete after dispatching non empty UpdateModelAction and `InitializeCanvasBoundsAction`', () => {
        (0, chai_1.expect)(constraint.isCompleted).to.be.false;
        constraint.notifyDispatched(sprotty_1.UpdateModelAction.create({ id: 'model', type: 'graph' }));
        (0, chai_1.expect)(constraint.isCompleted).to.be.false;
        constraint.notifyDispatched({ kind: sprotty_1.InitializeCanvasBoundsAction.KIND });
        (0, chai_1.expect)(constraint.isCompleted).to.be.true;
    });
    it('should note complete after dispatching empty SetModelAction and `InitializeCanvasBoundsAction` ', () => {
        (0, chai_1.expect)(constraint.isCompleted).to.be.false;
        constraint.notifyDispatched(sprotty_1.SetModelAction.create(sprotty_1.EMPTY_ROOT));
        (0, chai_1.expect)(constraint.isCompleted).to.be.false;
        constraint.notifyDispatched({ kind: sprotty_1.InitializeCanvasBoundsAction.KIND });
        (0, chai_1.expect)(constraint.isCompleted).to.be.false;
    });
    it('should note complete after dispatching  empty UpdateModelAction and `InitializeCanvasBoundsAction ', () => {
        (0, chai_1.expect)(constraint.isCompleted).to.be.false;
        constraint.notifyDispatched(sprotty_1.UpdateModelAction.create(sprotty_1.EMPTY_ROOT));
        (0, chai_1.expect)(constraint.isCompleted).to.be.false;
        constraint.notifyDispatched({ kind: sprotty_1.InitializeCanvasBoundsAction.KIND });
        (0, chai_1.expect)(constraint.isCompleted).to.be.false;
    });
    describe('onInitialized', () => {
        it('returned promise should resolve once the constraint is initialized', async () => {
            const initializeDeferred = new sprotty_1.Deferred();
            const initializePromise = constraint.onInitialized();
            initializePromise.then(() => initializeDeferred.resolve());
            (0, chai_1.expect)(initializeDeferred.state).to.be.equal('unresolved');
            // Directly trigger the completion method simplify test logic
            constraint['setCompleted']();
            // Short delay of test execution to ensure that the deferred state is updated.
            await new Promise(resolve => setTimeout(resolve, 5));
            (0, chai_1.expect)(initializeDeferred.state).to.be.equal('resolved');
        });
        it('registered listener should be invoked once the constraint is initialized', () => {
            constraint.onInitialized(listener);
            (0, chai_1.expect)(listener.called).to.be.false;
            // Directly trigger the completion method simplify test logic
            constraint['setCompleted']();
            (0, chai_1.expect)(listener.called).to.be.true;
        });
        it('registered listener should be invoked directly on registration if the constraint is already initialized', () => {
            // Directly trigger the completion method simplify test logic
            constraint['setCompleted']();
            constraint.onInitialized(listener);
            (0, chai_1.expect)(listener.called).to.be.true;
        });
        it('Disposed listener should not be invoked once the constraint is initialized', () => {
            const toDispose = constraint.onInitialized(listener);
            (0, chai_1.expect)(listener.called).to.be.false;
            toDispose.dispose();
            // Directly trigger the completion method simplify test logic
            constraint['setCompleted']();
            (0, chai_1.expect)(listener.called).to.be.false;
        });
    });
});
//# sourceMappingURL=model-initialization-constraint.spec.js.map
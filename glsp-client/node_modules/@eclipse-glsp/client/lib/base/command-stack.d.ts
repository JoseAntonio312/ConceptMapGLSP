import { CommandStack, Disposable, DisposableCollection, Emitter, Event, ICommand, GModelRoot } from '@eclipse-glsp/sprotty';
/**
 * A hook to listen for model root changes. Will be called after a server update
 * has been processed
 */
export interface ISModelRootListener {
    modelRootChanged(root: Readonly<GModelRoot>): void;
}
export declare class GLSPCommandStack extends CommandStack implements Disposable {
    protected modelRootListeners: ISModelRootListener[];
    protected toDispose: DisposableCollection;
    protected initialize(): void;
    dispose(): void;
    protected onModelRootChangedEmitter: Emitter<Readonly<GModelRoot>>;
    get onModelRootChanged(): Event<Readonly<GModelRoot>>;
    undo(): Promise<GModelRoot>;
    redo(): Promise<GModelRoot>;
    execute(command: ICommand): Promise<GModelRoot>;
    protected notifyListeners(root: Readonly<GModelRoot>): void;
}
//# sourceMappingURL=command-stack.d.ts.map
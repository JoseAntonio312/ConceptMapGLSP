"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GLSPCommandStack = void 0;
/********************************************************************************
 * Copyright (c) 2019-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const inversify_1 = require("inversify");
const sprotty_1 = require("@eclipse-glsp/sprotty");
let GLSPCommandStack = class GLSPCommandStack extends sprotty_1.CommandStack {
    constructor() {
        super(...arguments);
        this.modelRootListeners = [];
        this.toDispose = new sprotty_1.DisposableCollection();
        this.onModelRootChangedEmitter = new sprotty_1.Emitter();
    }
    initialize() {
        super.initialize();
        this.toDispose.push(this.onModelRootChangedEmitter);
        this.modelRootListeners.forEach(listener => this.onModelRootChanged(root => listener.modelRootChanged(root)));
    }
    dispose() {
        this.toDispose.dispose();
    }
    get onModelRootChanged() {
        return this.onModelRootChangedEmitter.event;
    }
    undo() {
        this.logger.warn(this, 'GLSPCommandStack.undo() was called. This should never happen as the GLSP server is responsible for handling undo requests');
        return this.currentModel;
    }
    redo() {
        this.logger.warn(this, 'GLSPCommandStack.redo() was called. This should never happen as the GLSP server is responsible for handling redo requests');
        return this.currentModel;
    }
    execute(command) {
        const result = super.execute(command);
        if (command instanceof sprotty_1.SetModelCommand || command instanceof sprotty_1.UpdateModelCommand) {
            result.then(root => this.notifyListeners(root));
        }
        return result;
    }
    notifyListeners(root) {
        this.onModelRootChangedEmitter.fire(root);
    }
};
exports.GLSPCommandStack = GLSPCommandStack;
__decorate([
    (0, inversify_1.multiInject)(sprotty_1.TYPES.ISModelRootListener),
    (0, inversify_1.optional)(),
    __metadata("design:type", Array)
], GLSPCommandStack.prototype, "modelRootListeners", void 0);
__decorate([
    (0, inversify_1.preDestroy)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], GLSPCommandStack.prototype, "dispose", null);
exports.GLSPCommandStack = GLSPCommandStack = __decorate([
    (0, inversify_1.injectable)()
], GLSPCommandStack);
//# sourceMappingURL=command-stack.js.map
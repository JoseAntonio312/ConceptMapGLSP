import { Action, Disposable, DisposableCollection, IActionHandler } from '@eclipse-glsp/sprotty';
import { GLSPActionDispatcher } from '../../base/action-dispatcher';
import { EditorContextService } from '../../base/editor-context-service';
import { IFeedbackActionDispatcher, IFeedbackEmitter } from '../../base/feedback/feedback-action-dispatcher';
import { Tool } from '../../base/tool-manager/tool';
import { GLSPKeyTool } from '../../base/view/key-tool';
import { GLSPMouseTool } from '../../base/view/mouse-tool';
/**
 *  A reusable base implementation for edit {@link Tool}s.
 */
export declare abstract class BaseEditTool implements Tool {
    protected feedbackDispatcher: IFeedbackActionDispatcher;
    protected actionDispatcher: GLSPActionDispatcher;
    protected mouseTool: GLSPMouseTool;
    protected keyTool: GLSPKeyTool;
    protected readonly editorContext: EditorContextService;
    protected readonly toDisposeOnDisable: DisposableCollection;
    abstract enable(): void;
    disable(): void;
    abstract id: string;
    get isEditTool(): boolean;
    dispatchActions(actions: Action[]): void;
    /**
     * Registers `actions` to be sent out as feedback, i.e., changes that are re-established whenever the `GModelRoot`
     * has been set or updated.
     *
     * @param feedbackActions the actions to be sent out.
     * @param feedbackEmitter the emitter sending out feedback actions (this tool by default).
     * @param cleanupActions the actions to be sent out when the feedback is de-registered through the returned Disposable.
     * @returns A 'Disposable' that de-registers the feedback and cleans up any pending feedback with the given `cleanupActions`.
     */
    registerFeedback(feedbackActions: Action[], feedbackEmitter?: IFeedbackEmitter, cleanupActions?: Action[]): Disposable;
    /**
     * De-registers all feedback from the given `feedbackEmitter` (this tool by default) and cleans up any pending feedback with the
     * given `cleanupActions`.
     *
     * @param feedbackEmitter the emitter to be deregistered (this tool by default).
     * @param cleanupActions the actions to be dispatched right after the deregistration to clean up any pending feedback.
     */
    deregisterFeedback(feedbackEmitter?: IFeedbackEmitter, cleanupActions?: Action[]): void;
}
export declare abstract class BaseCreationTool<T extends Action> extends BaseEditTool implements IActionHandler {
    protected abstract isTriggerAction: (obj: any) => obj is T;
    protected triggerAction: T;
    handle(action: Action): Action | void;
    enable(): void;
    protected abstract doEnable(): void;
}
//# sourceMappingURL=base-tools.d.ts.map
import { VNode } from 'snabbdom';
import { Action, CommandExecutionContext, CommandReturn, Disposable, ElementMove, MouseListener, MoveAction, Point, GModelElement, GModelRoot } from '@eclipse-glsp/sprotty';
import { FeedbackCommand } from '../../../base/feedback/feedback-command';
import { ChangeBoundsTool } from './change-bounds-tool';
export interface ShowChangeBoundsToolResizeFeedbackAction extends Action {
    kind: typeof ShowChangeBoundsToolResizeFeedbackAction.KIND;
    elementId: string;
}
export declare namespace ShowChangeBoundsToolResizeFeedbackAction {
    const KIND = "showChangeBoundsToolResizeFeedback";
    function is(object: any): object is ShowChangeBoundsToolResizeFeedbackAction;
    function create(elementId: string): ShowChangeBoundsToolResizeFeedbackAction;
}
export interface HideChangeBoundsToolResizeFeedbackAction extends Action {
    kind: typeof HideChangeBoundsToolResizeFeedbackAction.KIND;
}
export declare namespace HideChangeBoundsToolResizeFeedbackAction {
    const KIND = "hideChangeBoundsToolResizeFeedback";
    function is(object: any): object is HideChangeBoundsToolResizeFeedbackAction;
    function create(): HideChangeBoundsToolResizeFeedbackAction;
}
export declare class ShowChangeBoundsToolResizeFeedbackCommand extends FeedbackCommand {
    static readonly KIND = "showChangeBoundsToolResizeFeedback";
    protected action: ShowChangeBoundsToolResizeFeedbackAction;
    execute(context: CommandExecutionContext): CommandReturn;
}
export declare class HideChangeBoundsToolResizeFeedbackCommand extends FeedbackCommand {
    static readonly KIND = "hideChangeBoundsToolResizeFeedback";
    protected action: HideChangeBoundsToolResizeFeedbackAction;
    execute(context: CommandExecutionContext): CommandReturn;
}
/**
 * This mouse listener provides visual feedback for moving by sending client-side
 * `MoveAction`s while elements are selected and dragged. This will also update
 * their bounds, which is important, as it is not only required for rendering
 * the visual feedback but also the basis for sending the change to the server
 * (see also `tools/MoveTool`).
 */
export declare class FeedbackMoveMouseListener extends MouseListener implements Disposable {
    protected tool: ChangeBoundsTool;
    protected hasDragged: boolean;
    protected rootElement?: GModelRoot;
    protected startDragPosition?: Point;
    protected elementId2startPos: Map<string, Point>;
    constructor(tool: ChangeBoundsTool);
    mouseDown(target: GModelElement, event: MouseEvent): Action[];
    mouseMove(target: GModelElement, event: MouseEvent): Action[];
    protected collectStartPositions(root: GModelRoot): void;
    protected isChildOfSelected(selectedElements: Set<GModelElement>, element: GModelElement): boolean;
    protected getElementMoves(target: GModelElement, event: MouseEvent, finished: boolean): MoveAction | undefined;
    protected getElementMovesForDelta(target: GModelElement, delta: {
        x: number;
        y: number;
    }, isSnap: boolean, finished: boolean): ElementMove[];
    protected validateMove(startPosition: Point, toPosition: Point, element: GModelElement, isFinished: boolean): Point;
    protected snap(position: Point, element: GModelElement, isSnap: boolean): Point;
    mouseEnter(target: GModelElement, event: MouseEvent): Action[];
    mouseUp(target: GModelElement, event: MouseEvent): Action[];
    protected reset(resetFeedback?: boolean): void;
    decorate(vnode: VNode, _element: GModelElement): VNode;
    dispose(): void;
}
//# sourceMappingURL=change-bounds-tool-feedback.d.ts.map
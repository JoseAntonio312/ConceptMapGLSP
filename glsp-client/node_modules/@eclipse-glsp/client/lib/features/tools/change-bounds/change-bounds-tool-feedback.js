"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeedbackMoveMouseListener = exports.HideChangeBoundsToolResizeFeedbackCommand = exports.ShowChangeBoundsToolResizeFeedbackCommand = exports.HideChangeBoundsToolResizeFeedbackAction = exports.ShowChangeBoundsToolResizeFeedbackAction = void 0;
/********************************************************************************
 * Copyright (c) 2019-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const inversify_1 = require("inversify");
const sprotty_1 = require("@eclipse-glsp/sprotty");
const css_feedback_1 = require("../../../base/feedback/css-feedback");
const feedback_command_1 = require("../../../base/feedback/feedback-command");
const gmodel_util_1 = require("../../../utils/gmodel-util");
const model_1 = require("../../change-bounds/model");
const movement_restrictor_1 = require("../../change-bounds/movement-restrictor");
var ShowChangeBoundsToolResizeFeedbackAction;
(function (ShowChangeBoundsToolResizeFeedbackAction) {
    ShowChangeBoundsToolResizeFeedbackAction.KIND = 'showChangeBoundsToolResizeFeedback';
    function is(object) {
        return sprotty_1.Action.hasKind(object, ShowChangeBoundsToolResizeFeedbackAction.KIND) && (0, sprotty_1.hasStringProp)(object, 'elementId');
    }
    ShowChangeBoundsToolResizeFeedbackAction.is = is;
    function create(elementId) {
        return {
            kind: ShowChangeBoundsToolResizeFeedbackAction.KIND,
            elementId
        };
    }
    ShowChangeBoundsToolResizeFeedbackAction.create = create;
})(ShowChangeBoundsToolResizeFeedbackAction || (exports.ShowChangeBoundsToolResizeFeedbackAction = ShowChangeBoundsToolResizeFeedbackAction = {}));
var HideChangeBoundsToolResizeFeedbackAction;
(function (HideChangeBoundsToolResizeFeedbackAction) {
    HideChangeBoundsToolResizeFeedbackAction.KIND = 'hideChangeBoundsToolResizeFeedback';
    function is(object) {
        return sprotty_1.Action.hasKind(object, HideChangeBoundsToolResizeFeedbackAction.KIND);
    }
    HideChangeBoundsToolResizeFeedbackAction.is = is;
    function create() {
        return { kind: HideChangeBoundsToolResizeFeedbackAction.KIND };
    }
    HideChangeBoundsToolResizeFeedbackAction.create = create;
})(HideChangeBoundsToolResizeFeedbackAction || (exports.HideChangeBoundsToolResizeFeedbackAction = HideChangeBoundsToolResizeFeedbackAction = {}));
let ShowChangeBoundsToolResizeFeedbackCommand = class ShowChangeBoundsToolResizeFeedbackCommand extends feedback_command_1.FeedbackCommand {
    execute(context) {
        const index = context.root.index;
        (0, gmodel_util_1.forEachElement)(index, model_1.isResizable, model_1.removeResizeHandles);
        if (this.action.elementId) {
            const resizeElement = index.getById(this.action.elementId);
            if (resizeElement && (0, model_1.isResizable)(resizeElement)) {
                (0, model_1.addResizeHandles)(resizeElement);
            }
        }
        return context.root;
    }
};
exports.ShowChangeBoundsToolResizeFeedbackCommand = ShowChangeBoundsToolResizeFeedbackCommand;
ShowChangeBoundsToolResizeFeedbackCommand.KIND = ShowChangeBoundsToolResizeFeedbackAction.KIND;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.Action),
    __metadata("design:type", Object)
], ShowChangeBoundsToolResizeFeedbackCommand.prototype, "action", void 0);
exports.ShowChangeBoundsToolResizeFeedbackCommand = ShowChangeBoundsToolResizeFeedbackCommand = __decorate([
    (0, inversify_1.injectable)()
], ShowChangeBoundsToolResizeFeedbackCommand);
let HideChangeBoundsToolResizeFeedbackCommand = class HideChangeBoundsToolResizeFeedbackCommand extends feedback_command_1.FeedbackCommand {
    execute(context) {
        const index = context.root.index;
        (0, gmodel_util_1.forEachElement)(index, model_1.isResizable, model_1.removeResizeHandles);
        return context.root;
    }
};
exports.HideChangeBoundsToolResizeFeedbackCommand = HideChangeBoundsToolResizeFeedbackCommand;
HideChangeBoundsToolResizeFeedbackCommand.KIND = HideChangeBoundsToolResizeFeedbackAction.KIND;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.Action),
    __metadata("design:type", Object)
], HideChangeBoundsToolResizeFeedbackCommand.prototype, "action", void 0);
exports.HideChangeBoundsToolResizeFeedbackCommand = HideChangeBoundsToolResizeFeedbackCommand = __decorate([
    (0, inversify_1.injectable)()
], HideChangeBoundsToolResizeFeedbackCommand);
/**
 * This mouse listener provides visual feedback for moving by sending client-side
 * `MoveAction`s while elements are selected and dragged. This will also update
 * their bounds, which is important, as it is not only required for rendering
 * the visual feedback but also the basis for sending the change to the server
 * (see also `tools/MoveTool`).
 */
class FeedbackMoveMouseListener extends sprotty_1.MouseListener {
    constructor(tool) {
        super();
        this.tool = tool;
        this.hasDragged = false;
        this.elementId2startPos = new Map();
    }
    mouseDown(target, event) {
        if (event.button === 0 && !(target instanceof model_1.SResizeHandle)) {
            const moveable = (0, sprotty_1.findParentByFeature)(target, sprotty_1.isMoveable);
            if (moveable !== undefined) {
                this.startDragPosition = { x: event.pageX, y: event.pageY };
            }
            else {
                this.startDragPosition = undefined;
            }
            this.hasDragged = false;
        }
        return [];
    }
    mouseMove(target, event) {
        const result = [];
        if (event.buttons === 0) {
            this.mouseUp(target, event);
        }
        else if (this.startDragPosition) {
            if (this.elementId2startPos.size === 0) {
                this.collectStartPositions(target.root);
            }
            this.hasDragged = true;
            const moveAction = this.getElementMoves(target, event, false);
            if (moveAction) {
                result.push(moveAction);
                result.push((0, css_feedback_1.cursorFeedbackAction)(css_feedback_1.CursorCSS.MOVE));
            }
        }
        this.tool.registerFeedback(result, this);
        return [];
    }
    collectStartPositions(root) {
        this.rootElement = root;
        const selectedElements = root.index.all().filter(element => (0, sprotty_1.isSelectable)(element) && element.selected);
        const elementsSet = new Set(selectedElements);
        selectedElements
            .filter(element => !this.isChildOfSelected(elementsSet, element))
            .forEach(element => {
            if ((0, sprotty_1.isMoveable)(element)) {
                this.elementId2startPos.set(element.id, element.position);
            }
        });
    }
    isChildOfSelected(selectedElements, element) {
        while (element instanceof sprotty_1.GChildElement) {
            element = element.parent;
            if (selectedElements.has(element)) {
                return true;
            }
        }
        return false;
    }
    getElementMoves(target, event, finished) {
        if (!this.startDragPosition) {
            return undefined;
        }
        const viewport = (0, sprotty_1.findParentByFeature)(target, sprotty_1.isViewport);
        const zoom = viewport ? viewport.zoom : 1;
        const delta = {
            x: (event.pageX - this.startDragPosition.x) / zoom,
            y: (event.pageY - this.startDragPosition.y) / zoom
        };
        const elementMoves = this.getElementMovesForDelta(target, delta, !event.shiftKey, finished);
        if (elementMoves.length > 0) {
            return sprotty_1.MoveAction.create(elementMoves, { animate: false, finished });
        }
        else {
            return undefined;
        }
    }
    getElementMovesForDelta(target, delta, isSnap, finished) {
        const elementMoves = [];
        this.elementId2startPos.forEach((startPosition, elementId) => {
            const element = target.root.index.getById(elementId);
            if (element) {
                let toPosition = this.snap({
                    x: startPosition.x + delta.x,
                    y: startPosition.y + delta.y
                }, element, isSnap);
                if ((0, sprotty_1.isMoveable)(element)) {
                    toPosition = this.validateMove(startPosition, toPosition, element, finished);
                    elementMoves.push({
                        elementId: element.id,
                        fromPosition: {
                            x: element.position.x,
                            y: element.position.y
                        },
                        toPosition
                    });
                }
            }
        });
        return elementMoves;
    }
    validateMove(startPosition, toPosition, element, isFinished) {
        let newPosition = toPosition;
        if (this.tool.movementRestrictor) {
            const valid = this.tool.movementRestrictor.validate(element, toPosition);
            let action;
            if (!valid) {
                action = (0, movement_restrictor_1.createMovementRestrictionFeedback)(element, this.tool.movementRestrictor);
                if (isFinished) {
                    newPosition = startPosition;
                }
            }
            else {
                action = (0, movement_restrictor_1.removeMovementRestrictionFeedback)(element, this.tool.movementRestrictor);
            }
            this.tool.registerFeedback([action], this);
        }
        return newPosition;
    }
    snap(position, element, isSnap) {
        if (isSnap && this.tool.snapper) {
            return this.tool.snapper.snap(position, element);
        }
        else {
            return position;
        }
    }
    mouseEnter(target, event) {
        if (target instanceof sprotty_1.GModelRoot && event.buttons === 0 && !this.startDragPosition) {
            this.mouseUp(target, event);
        }
        return [];
    }
    mouseUp(target, event) {
        const result = [];
        if (this.startDragPosition) {
            const moveAction = this.getElementMoves(target, event, true);
            if (moveAction) {
                result.push(moveAction);
            }
            const resetFeedback = [];
            if (this.tool.movementRestrictor) {
                resetFeedback.push((0, movement_restrictor_1.removeMovementRestrictionFeedback)(target, this.tool.movementRestrictor));
            }
            resetFeedback.push((0, css_feedback_1.cursorFeedbackAction)(css_feedback_1.CursorCSS.DEFAULT));
            this.tool.deregisterFeedback(this, resetFeedback);
        }
        this.reset();
        return result;
    }
    reset(resetFeedback = false) {
        if (this.rootElement && resetFeedback) {
            const elementMoves = this.getElementMovesForDelta(this.rootElement, { x: 0, y: 0 }, true, true);
            const moveAction = sprotty_1.MoveAction.create(elementMoves, { animate: false, finished: true });
            this.tool.deregisterFeedback(this, [moveAction]);
        }
        this.hasDragged = false;
        this.startDragPosition = undefined;
        this.rootElement = undefined;
        this.elementId2startPos.clear();
    }
    decorate(vnode, _element) {
        return vnode;
    }
    dispose() {
        this.reset(true);
    }
}
exports.FeedbackMoveMouseListener = FeedbackMoveMouseListener;
//# sourceMappingURL=change-bounds-tool-feedback.js.map
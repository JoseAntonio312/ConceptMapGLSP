import { Action, Bounds, BoundsAware, Dimension, Disposable, EdgeRouterRegistry, ElementAndBounds, ISnapper, MouseListener, Operation, Point, GModelElement, GModelRoot, GParentElement } from '@eclipse-glsp/sprotty';
import { DragAwareMouseListener } from '../../../base/drag-aware-mouse-listener';
import { ISelectionListener, SelectionService } from '../../../base/selection-service';
import { PointPositionUpdater } from '../../../features/change-bounds/snap';
import { Resizable, SResizeHandle } from '../../change-bounds/model';
import { IMovementRestrictor } from '../../change-bounds/movement-restrictor';
import { BaseEditTool } from '../base-tools';
/**
 * The change bounds tool has the license to move multiple elements or resize a single element by implementing the ChangeBounds operation.
 * In contrast to Sprotty's implementation this tool only sends a `ChangeBoundsOperationAction` when an operation has finished and does not
 * provide client-side live updates to improve performance.
 *
 * | Operation | Client Update    | Server Update
 * +-----------+------------------+----------------------------
 * | Move      | MoveAction       | ChangeBoundsOperationAction
 * | Resize    | SetBoundsAction  | ChangeBoundsOperationAction
 *
 * To provide a visual client updates during move we install the `FeedbackMoveMouseListener` and to provide visual client updates during
 * resize and send the server updates we install the `ChangeBoundsListener`.
 */
export declare class ChangeBoundsTool extends BaseEditTool {
    static ID: string;
    protected selectionService: SelectionService;
    readonly edgeRouterRegistry?: EdgeRouterRegistry;
    readonly snapper?: ISnapper;
    readonly movementRestrictor?: IMovementRestrictor;
    get id(): string;
    enable(): void;
    protected createMoveMouseListener(): MouseListener;
    protected createChangeBoundsListener(): MouseListener & ISelectionListener;
}
export declare class ChangeBoundsListener extends DragAwareMouseListener implements ISelectionListener, Disposable {
    protected tool: ChangeBoundsTool;
    static readonly CSS_CLASS_ACTIVE = "active";
    protected initialBounds: Bounds | undefined;
    protected pointPositionUpdater: PointPositionUpdater;
    protected activeResizeElement?: GModelElement;
    protected activeResizeHandle?: SResizeHandle;
    constructor(tool: ChangeBoundsTool);
    mouseDown(target: GModelElement, event: MouseEvent): Action[];
    mouseMove(target: GModelElement, event: MouseEvent): Action[];
    draggingMouseUp(target: GModelElement, _event: MouseEvent): Action[];
    protected handleMoveOnServer(target: GModelElement): Action[];
    protected handleMoveElementsOnServer(target: GModelElement): Operation[];
    protected isChildOfSelected(selectedElements: Set<GModelElement>, element: GModelElement): boolean;
    protected handleMoveRoutingPointsOnServer(target: GModelElement): Operation[];
    protected handleResize(activeResizeHandle: SResizeHandle): Action[];
    selectionChanged(root: GModelRoot, selectedElements: string[]): void;
    protected setActiveResizeElement(target: GModelElement): boolean;
    protected isActiveResizeElement(element?: GModelElement): element is GParentElement & BoundsAware;
    protected initPosition(event: MouseEvent): void;
    dispose(): void;
    protected reset(resetBounds?: boolean): void;
    protected resetFeedback(resetBounds?: boolean): void;
    protected resetPosition(): void;
    protected handleResizeOnClient(positionUpdate: Point): Action[];
    protected handleTopLeftResize(resizeElement: GParentElement & Resizable, positionUpdate: Point): Action[];
    protected handleTopRightResize(resizeElement: GParentElement & Resizable, positionUpdate: Point): Action[];
    protected handleBottomLeftResize(resizeElement: GParentElement & Resizable, positionUpdate: Point): Action[];
    protected handleBottomRightResize(resizeElement: GParentElement & Resizable, positionUpdate: Point): Action[];
    protected createChangeBoundsAction(element: GModelElement & BoundsAware): Action[];
    protected createElementAndBounds(element: GModelElement & BoundsAware): ElementAndBounds[];
    protected createSetBoundsAction(element: GModelElement & BoundsAware, x: number, y: number, width: number, height: number): Action[];
    protected snap(position: Point, element: GModelElement, isSnap: boolean): Point;
    protected isValidBoundChange(element: GModelElement & BoundsAware, newPosition: Point, newSize: Dimension): boolean;
    protected isValidSize(element: GModelElement & BoundsAware, size: Dimension): boolean;
    protected isValidMove(element: GModelElement & BoundsAware, newPosition: Point): boolean;
}
//# sourceMappingURL=change-bounds-tool.d.ts.map
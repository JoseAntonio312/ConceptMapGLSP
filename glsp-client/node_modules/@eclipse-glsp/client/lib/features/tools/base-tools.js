"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseCreationTool = exports.BaseEditTool = void 0;
/********************************************************************************
 * Copyright (c) 2020-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const inversify_1 = require("inversify");
const sprotty_1 = require("@eclipse-glsp/sprotty");
const action_dispatcher_1 = require("../../base/action-dispatcher");
const editor_context_service_1 = require("../../base/editor-context-service");
const tool_1 = require("../../base/tool-manager/tool");
const key_tool_1 = require("../../base/view/key-tool");
const mouse_tool_1 = require("../../base/view/mouse-tool");
/**
 *  A reusable base implementation for edit {@link Tool}s.
 */
let BaseEditTool = class BaseEditTool {
    constructor() {
        this.toDisposeOnDisable = new sprotty_1.DisposableCollection();
    }
    disable() {
        this.toDisposeOnDisable.dispose();
    }
    get isEditTool() {
        return true;
    }
    dispatchActions(actions) {
        this.actionDispatcher.dispatchAll(actions);
    }
    /**
     * Registers `actions` to be sent out as feedback, i.e., changes that are re-established whenever the `GModelRoot`
     * has been set or updated.
     *
     * @param feedbackActions the actions to be sent out.
     * @param feedbackEmitter the emitter sending out feedback actions (this tool by default).
     * @param cleanupActions the actions to be sent out when the feedback is de-registered through the returned Disposable.
     * @returns A 'Disposable' that de-registers the feedback and cleans up any pending feedback with the given `cleanupActions`.
     */
    registerFeedback(feedbackActions, feedbackEmitter, cleanupActions) {
        return this.feedbackDispatcher.registerFeedback(feedbackEmitter !== null && feedbackEmitter !== void 0 ? feedbackEmitter : this, feedbackActions, cleanupActions);
    }
    /**
     * De-registers all feedback from the given `feedbackEmitter` (this tool by default) and cleans up any pending feedback with the
     * given `cleanupActions`.
     *
     * @param feedbackEmitter the emitter to be deregistered (this tool by default).
     * @param cleanupActions the actions to be dispatched right after the deregistration to clean up any pending feedback.
     */
    deregisterFeedback(feedbackEmitter, cleanupActions) {
        this.feedbackDispatcher.deregisterFeedback(feedbackEmitter !== null && feedbackEmitter !== void 0 ? feedbackEmitter : this, cleanupActions);
    }
};
exports.BaseEditTool = BaseEditTool;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IFeedbackActionDispatcher),
    __metadata("design:type", Object)
], BaseEditTool.prototype, "feedbackDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", action_dispatcher_1.GLSPActionDispatcher)
], BaseEditTool.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(mouse_tool_1.GLSPMouseTool),
    __metadata("design:type", mouse_tool_1.GLSPMouseTool)
], BaseEditTool.prototype, "mouseTool", void 0);
__decorate([
    (0, inversify_1.inject)(key_tool_1.GLSPKeyTool),
    __metadata("design:type", key_tool_1.GLSPKeyTool)
], BaseEditTool.prototype, "keyTool", void 0);
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], BaseEditTool.prototype, "editorContext", void 0);
exports.BaseEditTool = BaseEditTool = __decorate([
    (0, inversify_1.injectable)()
], BaseEditTool);
let BaseCreationTool = class BaseCreationTool extends BaseEditTool {
    handle(action) {
        if (this.isTriggerAction(action)) {
            this.triggerAction = action;
            return tool_1.EnableToolsAction.create([this.id]);
        }
    }
    enable() {
        if (this.triggerAction === undefined) {
            throw new TypeError(`Could not enable tool ${this.id}. The triggerAction cannot be undefined.`);
        }
        this.doEnable();
    }
};
exports.BaseCreationTool = BaseCreationTool;
exports.BaseCreationTool = BaseCreationTool = __decorate([
    (0, inversify_1.injectable)()
], BaseCreationTool);
//# sourceMappingURL=base-tools.js.map
import { Action, AnchorComputerRegistry, GModelElement, TriggerEdgeCreationAction } from '@eclipse-glsp/sprotty';
import { GLSPActionDispatcher } from '../../../base/action-dispatcher';
import { DragAwareMouseListener } from '../../../base/drag-aware-mouse-listener';
import { ITypeHintProvider } from '../../hints/type-hint-provider';
import { BaseCreationTool } from '../base-tools';
import { GEdge } from '../../../model';
/**
 * Tool to create connections in a Diagram, by selecting a source and target node.
 */
export declare class EdgeCreationTool extends BaseCreationTool<TriggerEdgeCreationAction> {
    static ID: string;
    protected anchorRegistry: AnchorComputerRegistry;
    protected typeHintProvider: ITypeHintProvider;
    protected isTriggerAction: typeof TriggerEdgeCreationAction.is;
    get id(): string;
    doEnable(): void;
}
export declare class EdgeCreationToolMouseListener extends DragAwareMouseListener {
    protected triggerAction: TriggerEdgeCreationAction;
    protected actionDispatcher: GLSPActionDispatcher;
    protected typeHintProvider: ITypeHintProvider;
    protected tool: EdgeCreationTool;
    protected source?: string;
    protected target?: string;
    protected currentTarget?: GModelElement;
    protected allowedTarget: boolean;
    protected proxyEdge: GEdge;
    protected pendingDynamicCheck: boolean;
    constructor(triggerAction: TriggerEdgeCreationAction, actionDispatcher: GLSPActionDispatcher, typeHintProvider: ITypeHintProvider, tool: EdgeCreationTool);
    protected reinitialize(): void;
    nonDraggingMouseUp(_element: GModelElement, event: MouseEvent): Action[];
    protected isSourceSelected(): boolean;
    protected isTargetSelected(): boolean;
    mouseOver(target: GModelElement, event: MouseEvent): Action[];
    protected updateEdgeFeedback(): Action;
    protected canConnect(element: GModelElement | undefined, role: 'source' | 'target'): boolean;
    protected isDynamic(edgeTypeId: string): boolean;
}
//# sourceMappingURL=edge-creation-tool.d.ts.map
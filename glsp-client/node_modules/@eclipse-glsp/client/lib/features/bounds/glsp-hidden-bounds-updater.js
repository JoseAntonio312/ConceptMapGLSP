"use strict";
/********************************************************************************
 * Copyright (c) 2022-2023 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GLSPHiddenBoundsUpdater = void 0;
const inversify_1 = require("inversify");
const sprotty_1 = require("@eclipse-glsp/sprotty");
const gmodel_util_1 = require("../../utils/gmodel-util");
/**
 * Grabs the bounds from hidden SVG DOM elements, applies layouts, collects routes and fires {@link ComputedBoundsAction}s.
 *
 * The actions will contain the bound, alignment, and routing points of elements.
 */
let GLSPHiddenBoundsUpdater = class GLSPHiddenBoundsUpdater extends sprotty_1.HiddenBoundsUpdater {
    constructor() {
        super(...arguments);
        this.element2route = [];
        this.edges = [];
        this.nodes = [];
    }
    decorate(vnode, element) {
        super.decorate(vnode, element);
        if ((0, gmodel_util_1.isRoutable)(element)) {
            this.element2route.push((0, gmodel_util_1.calcElementAndRoute)(element, this.edgeRouterRegistry));
        }
        return vnode;
    }
    postUpdate(cause) {
        const actions = this.captureActions(() => super.postUpdate(cause));
        actions
            .filter(action => sprotty_1.ComputedBoundsAction.is(action))
            .forEach(action => this.actionDispatcher.dispatch(this.enhanceAction(action)));
        this.element2route = [];
    }
    captureActions(call) {
        const capturingActionDispatcher = new CapturingActionDispatcher();
        const actualActionDispatcher = this.actionDispatcher;
        this.actionDispatcher = capturingActionDispatcher;
        try {
            call();
            return capturingActionDispatcher.actions;
        }
        finally {
            this.actionDispatcher = actualActionDispatcher;
        }
    }
    enhanceAction(action) {
        action.routes = this.element2route.length === 0 ? undefined : this.element2route;
        return action;
    }
};
exports.GLSPHiddenBoundsUpdater = GLSPHiddenBoundsUpdater;
__decorate([
    (0, inversify_1.inject)(sprotty_1.EdgeRouterRegistry),
    (0, inversify_1.optional)(),
    __metadata("design:type", sprotty_1.EdgeRouterRegistry)
], GLSPHiddenBoundsUpdater.prototype, "edgeRouterRegistry", void 0);
exports.GLSPHiddenBoundsUpdater = GLSPHiddenBoundsUpdater = __decorate([
    (0, inversify_1.injectable)()
], GLSPHiddenBoundsUpdater);
class CapturingActionDispatcher {
    constructor() {
        this.actions = [];
    }
    async dispatch(action) {
        this.actions.push(action);
    }
    async dispatchAll(actions) {
        this.actions.push(...actions);
    }
    async request(action) {
        // ignore, not needed for our purposes
        return new sprotty_1.Deferred().promise;
    }
}
//# sourceMappingURL=glsp-hidden-bounds-updater.js.map
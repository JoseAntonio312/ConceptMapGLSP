"use strict";
/********************************************************************************
 * Copyright (c) 2022-2023 STMicroelectronics and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupLayoutRegistry = exports.layout = exports.addToMap = exports.createLabel = exports.createCompartment = exports.createNode = exports.createGraph = void 0;
const inversify_1 = require("inversify");
require("mocha");
const sprotty_1 = require("@eclipse-glsp/sprotty");
const default_modules_1 = require("../../default-modules");
const layouter_1 = require("./layouter");
const model_1 = require("../../model");
function createGraph() {
    return new model_1.GGraph();
}
exports.createGraph = createGraph;
function createNode(type, nodeLayout, size, position, layoutOptions) {
    const node = new sprotty_1.GNode();
    node.features = (0, sprotty_1.createFeatureSet)(sprotty_1.GNode.DEFAULT_FEATURES, { enable: [sprotty_1.layoutableChildFeature] });
    node.position = position || {
        x: 0,
        y: 0
    };
    if (size) {
        node.size = size;
    }
    node.type = type;
    if (nodeLayout) {
        node.layout = nodeLayout;
    }
    node.layoutOptions = layoutOptions;
    return node;
}
exports.createNode = createNode;
function createCompartment(type, compLayout, layoutOptions) {
    const comp = new sprotty_1.GCompartment();
    comp.features = (0, sprotty_1.createFeatureSet)(sprotty_1.GCompartment.DEFAULT_FEATURES);
    comp.type = type;
    comp.layout = compLayout;
    comp.layoutOptions = layoutOptions;
    return comp;
}
exports.createCompartment = createCompartment;
function createLabel(labelText, layoutOptions, position, size) {
    const label = new sprotty_1.GLabel();
    label.features = (0, sprotty_1.createFeatureSet)(sprotty_1.GLabel.DEFAULT_FEATURES);
    if (position) {
        label.position = position;
    }
    if (size) {
        label.size = size;
    }
    label.layoutOptions = layoutOptions;
    label.text = labelText;
    label.type = 'label';
    return label;
}
exports.createLabel = createLabel;
function addToMap(map, element) {
    map.set(element, {
        bounds: element.bounds,
        boundsChanged: true,
        alignmentChanged: true
    });
    if (element instanceof sprotty_1.GParentElement) {
        element.children.forEach(c => addToMap(map, c));
    }
}
exports.addToMap = addToMap;
function layout(layoutRegistry, log, map, model) {
    map.clear();
    addToMap(map, model);
    const layouter = new layouter_1.StatefulLayouterExt(map, layoutRegistry, log);
    layouter.layout();
}
exports.layout = layout;
function setupLayoutRegistry() {
    // Generic Test setup
    // create client container that registers all default modules including the layoutModule
    const layoutContainer = (0, default_modules_1.initializeDiagramContainer)(new inversify_1.Container());
    return layoutContainer.get(sprotty_1.TYPES.LayoutRegistry);
}
exports.setupLayoutRegistry = setupLayoutRegistry;
//# sourceMappingURL=layouter-test-util.spec.js.map
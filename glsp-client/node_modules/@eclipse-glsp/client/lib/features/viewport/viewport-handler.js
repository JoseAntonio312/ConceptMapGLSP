"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RestoreViewportHandler = void 0;
/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const sprotty_1 = require("@eclipse-glsp/sprotty");
const inversify_1 = require("inversify");
const focus_tracker_1 = require("../../base/focus/focus-tracker");
const tool_1 = require("../../base/tool-manager/tool");
const actions_1 = require("../accessibility/actions");
/**
 * Focuses the graph on different actions.
 */
let RestoreViewportHandler = class RestoreViewportHandler {
    constructor() {
        this.graphSelector = '[data-svg-metadata-type="graph"]';
    }
    handle(action) {
        if (tool_1.EnableDefaultToolsAction.is(action) || (actions_1.FocusDomAction.is(action) && action.id === 'graph')) {
            this.focusGraph();
        }
    }
    async postRequestModel() {
        await this.waitForElement(this.graphSelector);
        this.focusGraph();
    }
    focusGraph() {
        var _a;
        if (this.focusTracker.hasFocus) {
            const container = (_a = this.focusTracker.diagramElement) === null || _a === void 0 ? void 0 : _a.querySelector(this.graphSelector);
            container === null || container === void 0 ? void 0 : container.focus();
        }
    }
    // https://stackoverflow.com/questions/5525071/how-to-wait-until-an-element-exists
    waitForElement(selector) {
        return new Promise(resolve => {
            if (document.querySelector(selector)) {
                return resolve(document.querySelector(selector));
            }
            const observer = new MutationObserver(mutations => {
                if (document.querySelector(selector)) {
                    observer.disconnect();
                    resolve(document.querySelector(selector));
                }
            });
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
        });
    }
};
exports.RestoreViewportHandler = RestoreViewportHandler;
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], RestoreViewportHandler.prototype, "options", void 0);
__decorate([
    (0, inversify_1.inject)(focus_tracker_1.FocusTracker),
    __metadata("design:type", focus_tracker_1.FocusTracker)
], RestoreViewportHandler.prototype, "focusTracker", void 0);
exports.RestoreViewportHandler = RestoreViewportHandler = __decorate([
    (0, inversify_1.injectable)()
], RestoreViewportHandler);
//# sourceMappingURL=viewport-handler.js.map
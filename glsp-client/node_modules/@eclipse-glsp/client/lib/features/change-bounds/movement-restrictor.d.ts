import { BoundsAware, Point, GModelElement } from '@eclipse-glsp/sprotty';
import { ModifyCSSFeedbackAction } from '../../base/feedback/css-feedback';
/**
 * A `MovementRestrictor` is an optional service that can be used by tools to validate
 * whether a certain move operation (e.g. `ChangeBoundsOperation`) in the diagram is valid.
 */
export interface IMovementRestrictor {
    /**
     * Validate whether moving the given element to a new given location is allowed.
     * @param element The element that should be moved.
     * @param newLocation The new location of the element.
     * @returns `true` if the the element is movable and moving to the given location is allowed, `false` otherwise.
     *          Should also return `false` if the newLocation is `undefined`:
     */
    validate(element: GModelElement, newLocation?: Point): boolean;
    /**
     * Feedback css-classes. Can be applied to elements that did fail the validation.
     */
    cssClasses?: string[];
}
/**
 *  A `IMovementRestrictor` that checks for overlapping elements. Move operations
 *  are only valid if the element does not collide with another element after moving.
 */
export declare class NoOverlapMovementRestrictor implements IMovementRestrictor {
    cssClasses: string[];
    validate(element: GModelElement, newLocation?: Point): boolean;
    protected areOverlapping(element1: GModelElement & BoundsAware, element2: GModelElement & BoundsAware): boolean;
}
/**
 * Utility function to create an action that applies the given {@link IMovementRestrictor.cssClasses} to the given element.
 * @param element The element on which the css classes should be applied.
 * @param movementRestrictor The movement restrictor whose cssClasses should be applied.
 * @returns The corresponding {@link ModifyCSSFeedbackAction}
 */
export declare function createMovementRestrictionFeedback(element: GModelElement, movementRestrictor: IMovementRestrictor): ModifyCSSFeedbackAction;
/**
 * Utility function to create an action that removes the given {@link IMovementRestrictor.cssClasses} from the given element.
 * @param element The element from which the css classes should be removed.
 * @param movementRestrictor The movement restrictor whose cssClasses should be removed.
 * @returns The corresponding {@link ModifyCSSFeedbackAction}
 */
export declare function removeMovementRestrictionFeedback(element: GModelElement, movementRestrictor: IMovementRestrictor): ModifyCSSFeedbackAction;
//# sourceMappingURL=movement-restrictor.d.ts.map
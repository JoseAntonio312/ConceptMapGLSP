import { ISnapper, Point, GModelElement, Writable } from '@eclipse-glsp/sprotty';
/**
 * A {@link ISnapper} implementation that snaps all elements onto a fixed gride size.
 * The default grid size is 10x10 pixel.
 * To configure a custom grid size  bind the `TYPES.ISnapper` service identifier
 * to constant value, e.g:
 *
 * ```ts
 * bind(TYPES.ISnapper).toConstantValue(new GridSnapper({x:25 ,y:25 }));
 * ```
 */
export declare class GridSnapper implements ISnapper {
    grid: {
        x: number;
        y: number;
    };
    constructor(grid?: {
        x: number;
        y: number;
    });
    snap(position: Point, element: GModelElement): Point;
}
/**
 * This class can be used to calculate the current position, when an element is
 * moved. This includes node movements, node resizing (resize handle movement)
 * or edge routing-point movements.
 *
 * You can initialize a this class with a optional {@link ISnapper}. If a
 * snapper is present, the positions will be snapped to the defined grid.
 */
export declare class PointPositionUpdater {
    protected snapper?: ISnapper | undefined;
    protected lastDragPosition?: Point;
    protected positionDelta: Writable<Point>;
    constructor(snapper?: ISnapper | undefined);
    /**
     * Init the position with the {@link Point} of your mouse cursor.
     * This method is normally called in the `mouseDown` event.
     * @param mousePosition current mouse position e.g `{x: event.pageX, y: event.pageY }`
     */
    updateLastDragPosition(mousePosition: Point): void;
    /**
     * Check if the mouse is currently not in a drag mode.
     * @returns true if the last drag position is undefined
     */
    isLastDragPositionUndefined(): boolean;
    /**
     * Reset the updater for new movements.
     * This method is normally called in the `mouseUp` event.
     */
    resetPosition(): void;
    /**
     * Calculate the current position of your movement.
     * This method is normally called in the `mouseMove` event.
     * @param target node which is moved around
     * @param mousePosition current mouse position e.g `{x: event.pageX, y: event.pageY }`
     * @param isSnapEnabled if a snapper is defined you can disable it, e.g when a specific key is pressed `!event.altKey`
     * @returns current position or undefined if updater has no last drag position initialized
     */
    updatePosition(target: GModelElement, mousePosition: Point, isSnapEnabled: boolean): Point | undefined;
    protected snap(position: Point, element: GModelElement, isSnap: boolean): Point;
}
//# sourceMappingURL=snap.d.ts.map
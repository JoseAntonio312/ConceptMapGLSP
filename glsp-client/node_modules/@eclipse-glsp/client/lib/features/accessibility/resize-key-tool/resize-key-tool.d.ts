/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Action, ISnapper, KeyListener, KeyTool, GModelElement } from '@eclipse-glsp/sprotty';
import { GLSPActionDispatcher } from '../../../base/action-dispatcher';
import { SelectionService } from '../../../base/selection-service';
import { Tool } from '../../../base/tool-manager/tool';
import { IMovementRestrictor } from '../../change-bounds/movement-restrictor';
import { AccessibleKeyShortcutProvider } from '../key-shortcut/accessible-key-shortcut';
export declare class ResizeKeyTool implements Tool {
    static ID: string;
    isEditTool: boolean;
    protected readonly keytool: KeyTool;
    readonly movementRestrictor?: IMovementRestrictor;
    readonly snapper?: ISnapper;
    readonly actionDispatcher: GLSPActionDispatcher;
    readonly selectionService: SelectionService;
    protected resizeKeyListener: ResizeKeyListener;
    get id(): string;
    enable(): void;
    disable(): void;
}
export declare class ResizeKeyListener extends KeyListener implements AccessibleKeyShortcutProvider {
    protected readonly tool: ResizeKeyTool;
    protected isEditMode: boolean;
    protected readonly token: string;
    constructor(tool: ResizeKeyTool);
    registerShortcutKey(): void;
    keyDown(element: GModelElement, event: KeyboardEvent): Action[];
    protected matchesIncreaseSizeKeystroke(event: KeyboardEvent): boolean;
    protected matchesActivateResizeModeKeystroke(event: KeyboardEvent): boolean;
    protected matchesDeactivateResizeModeKeystroke(event: KeyboardEvent): boolean;
    protected matchesMinSizeKeystroke(event: KeyboardEvent): boolean;
    protected matchesDecreaseSizeKeystroke(event: KeyboardEvent): boolean;
}
//# sourceMappingURL=resize-key-tool.d.ts.map
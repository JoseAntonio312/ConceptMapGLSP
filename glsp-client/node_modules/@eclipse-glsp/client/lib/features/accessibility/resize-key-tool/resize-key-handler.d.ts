/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Action, Dimension, IActionDispatcher, IActionHandler, ICommand, ISnapper, Point } from '@eclipse-glsp/sprotty';
import { EditorContextService } from '../../../base/editor-context-service';
import { SelectableBoundsAware } from '../../../utils/gmodel-util';
export declare enum ResizeType {
    Increase = 0,
    Decrease = 1,
    MinSize = 2
}
/**
 * Action for triggering resizing of elements.
 */
export interface ResizeElementAction extends Action {
    kind: typeof ResizeElementAction.KIND;
    elementIds: string[];
    resizeType: ResizeType;
}
export declare namespace ResizeElementAction {
    const KIND = "resizeElementAction";
    function is(object: any): object is ResizeElementAction;
    function create(elementIds: string[], resizeType: ResizeType): ResizeElementAction;
}
export declare class ResizeElementHandler implements IActionHandler {
    protected readonly snapper?: ISnapper | undefined;
    protected editorContextService: EditorContextService;
    protected dispatcher: IActionDispatcher;
    static readonly defaultResizeX = 20;
    static readonly defaultResizeY = 20;
    protected grid: {
        x: number;
        y: number;
    };
    protected isEditMode: boolean;
    constructor(snapper?: ISnapper | undefined);
    handle(action: Action): void | Action | ICommand;
    handleResizeElement(action: ResizeElementAction): void;
    protected resize(elements: SelectableBoundsAware[], action: ResizeElementAction): Action[];
    protected isValidBoundChange(element: SelectableBoundsAware, newPosition: Point, newSize: Dimension): boolean;
}
//# sourceMappingURL=resize-key-handler.d.ts.map
"use strict";
/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var ResizeKeyTool_1, ResizeKeyListener_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResizeKeyListener = exports.ResizeKeyTool = void 0;
const inversify_1 = require("inversify");
const keyboard_1 = require("sprotty/lib/utils/keyboard");
const sprotty_1 = require("@eclipse-glsp/sprotty");
const action_dispatcher_1 = require("../../../base/action-dispatcher");
const selection_service_1 = require("../../../base/selection-service");
const tool_1 = require("../../../base/tool-manager/tool");
const accessible_key_shortcut_1 = require("../key-shortcut/accessible-key-shortcut");
const messages = require("../toast/messages.json");
const toast_handler_1 = require("../toast/toast-handler");
const resize_key_handler_1 = require("./resize-key-handler");
let ResizeKeyTool = ResizeKeyTool_1 = class ResizeKeyTool {
    constructor() {
        this.isEditTool = true;
        this.resizeKeyListener = new ResizeKeyListener(this);
    }
    get id() {
        return ResizeKeyTool_1.ID;
    }
    enable() {
        this.keytool.register(this.resizeKeyListener);
        this.resizeKeyListener.registerShortcutKey();
    }
    disable() {
        this.keytool.deregister(this.resizeKeyListener);
    }
};
exports.ResizeKeyTool = ResizeKeyTool;
ResizeKeyTool.ID = 'glsp.resize-key-tool';
__decorate([
    (0, inversify_1.inject)(sprotty_1.KeyTool),
    __metadata("design:type", sprotty_1.KeyTool)
], ResizeKeyTool.prototype, "keytool", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IMovementRestrictor),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], ResizeKeyTool.prototype, "movementRestrictor", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.ISnapper),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], ResizeKeyTool.prototype, "snapper", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", action_dispatcher_1.GLSPActionDispatcher)
], ResizeKeyTool.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(selection_service_1.SelectionService),
    __metadata("design:type", selection_service_1.SelectionService)
], ResizeKeyTool.prototype, "selectionService", void 0);
exports.ResizeKeyTool = ResizeKeyTool = ResizeKeyTool_1 = __decorate([
    (0, inversify_1.injectable)()
], ResizeKeyTool);
let ResizeKeyListener = ResizeKeyListener_1 = class ResizeKeyListener extends sprotty_1.KeyListener {
    constructor(tool) {
        super();
        this.tool = tool;
        this.isEditMode = false;
        this.token = ResizeKeyListener_1.name;
    }
    registerShortcutKey() {
        this.tool.actionDispatcher.dispatchOnceModelInitialized(accessible_key_shortcut_1.SetAccessibleKeyShortcutAction.create({
            token: this.token,
            keys: [
                { shortcuts: ['ALT', 'A'], description: 'Activate resize mode for selected element', group: 'Resize', position: 0 },
                { shortcuts: ['+'], description: 'Increase size of element', group: 'Resize', position: 1 },
                { shortcuts: ['-'], description: 'Increase size of element', group: 'Resize', position: 2 },
                { shortcuts: ['CTRL', '0'], description: 'Set element size to default', group: 'Resize', position: 3 }
            ]
        }));
    }
    keyDown(element, event) {
        const actions = [];
        const selectedElementsIds = this.tool.selectionService.getSelectedElementIDs();
        if (this.isEditMode && this.matchesDeactivateResizeModeKeystroke(event)) {
            this.isEditMode = false;
            this.tool.actionDispatcher.dispatch(toast_handler_1.ShowToastMessageAction.createWithTimeout({
                id: Symbol.for(ResizeKeyListener_1.name),
                message: messages.resize.resize_mode_deactivated
            }));
            actions.push(tool_1.EnableDefaultToolsAction.create());
        }
        if (selectedElementsIds.length > 0) {
            if (!this.isEditMode && this.matchesActivateResizeModeKeystroke(event)) {
                this.isEditMode = true;
                this.tool.actionDispatcher.dispatch(toast_handler_1.ShowToastMessageAction.create({
                    id: Symbol.for(ResizeKeyListener_1.name),
                    message: messages.resize.resize_mode_activated
                }));
                actions.push(tool_1.EnableToolsAction.create([ResizeKeyTool.ID]));
            }
            if (this.isEditMode) {
                if (this.matchesIncreaseSizeKeystroke(event)) {
                    actions.push(resize_key_handler_1.ResizeElementAction.create(selectedElementsIds, resize_key_handler_1.ResizeType.Increase));
                }
                else if (this.matchesDecreaseSizeKeystroke(event)) {
                    actions.push(resize_key_handler_1.ResizeElementAction.create(selectedElementsIds, resize_key_handler_1.ResizeType.Decrease));
                }
                else if (this.matchesMinSizeKeystroke(event)) {
                    actions.push(resize_key_handler_1.ResizeElementAction.create(selectedElementsIds, resize_key_handler_1.ResizeType.MinSize));
                }
            }
        }
        return actions;
    }
    matchesIncreaseSizeKeystroke(event) {
        /** here event.key is used for '+', as keycode 187 is already declared for 'Equals' in {@link matchesKeystroke}.*/
        return event.key === '+' || (0, keyboard_1.matchesKeystroke)(event, 'NumpadAdd');
    }
    matchesActivateResizeModeKeystroke(event) {
        return (0, keyboard_1.matchesKeystroke)(event, 'KeyA', 'alt');
    }
    matchesDeactivateResizeModeKeystroke(event) {
        return (0, keyboard_1.matchesKeystroke)(event, 'Escape');
    }
    matchesMinSizeKeystroke(event) {
        return (0, keyboard_1.matchesKeystroke)(event, 'Digit0', 'ctrl') || (0, keyboard_1.matchesKeystroke)(event, 'Numpad0', 'ctrl');
    }
    matchesDecreaseSizeKeystroke(event) {
        return (0, keyboard_1.matchesKeystroke)(event, 'Minus') || (0, keyboard_1.matchesKeystroke)(event, 'NumpadSubtract');
    }
};
exports.ResizeKeyListener = ResizeKeyListener;
exports.ResizeKeyListener = ResizeKeyListener = ResizeKeyListener_1 = __decorate([
    (0, inversify_1.injectable)(),
    __metadata("design:paramtypes", [ResizeKeyTool])
], ResizeKeyListener);
//# sourceMappingURL=resize-key-tool.js.map
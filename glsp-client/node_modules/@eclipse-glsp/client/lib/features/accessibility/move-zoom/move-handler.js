"use strict";
/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MoveElementHandler = exports.MoveViewportHandler = exports.MoveElementAction = exports.MoveViewportAction = void 0;
const inversify_1 = require("inversify");
const lodash_1 = require("lodash");
const sprotty_1 = require("@eclipse-glsp/sprotty");
const editor_context_service_1 = require("../../../base/editor-context-service");
const gmodel_util_1 = require("../../../utils/gmodel-util");
var MoveViewportAction;
(function (MoveViewportAction) {
    MoveViewportAction.KIND = 'moveViewportAction';
    function is(object) {
        return sprotty_1.Action.hasKind(object, MoveViewportAction.KIND);
    }
    MoveViewportAction.is = is;
    function create(moveX, moveY) {
        return { kind: MoveViewportAction.KIND, moveX, moveY };
    }
    MoveViewportAction.create = create;
})(MoveViewportAction || (exports.MoveViewportAction = MoveViewportAction = {}));
var MoveElementAction;
(function (MoveElementAction) {
    MoveElementAction.KIND = 'moveElementAction';
    function is(object) {
        return sprotty_1.Action.hasKind(object, MoveElementAction.KIND);
    }
    MoveElementAction.is = is;
    function create(elementIds, moveX, moveY) {
        return { kind: MoveElementAction.KIND, elementIds, moveX, moveY };
    }
    MoveElementAction.create = create;
})(MoveElementAction || (exports.MoveElementAction = MoveElementAction = {}));
/* The MoveViewportHandler class is an implementation of the IActionHandler interface that handles
moving of the viewport. */
let MoveViewportHandler = class MoveViewportHandler {
    constructor() {
        this.throttledHandleViewportMove = (0, lodash_1.throttle)((action) => this.handleMoveViewport(action), 150);
    }
    handle(action) {
        if (MoveViewportAction.is(action)) {
            this.throttledHandleViewportMove(action);
        }
    }
    handleMoveViewport(action) {
        const viewport = (0, sprotty_1.findParentByFeature)(this.editorContextService.modelRoot, sprotty_1.isViewport);
        if (!viewport) {
            return;
        }
        this.dispatcher.dispatch(this.moveViewport(viewport, action.moveX, action.moveY));
    }
    moveViewport(viewport, offsetX, offSetY) {
        const newViewport = {
            scroll: {
                x: viewport.scroll.x + offsetX,
                y: viewport.scroll.y + offSetY
            },
            zoom: viewport.zoom
        };
        return sprotty_1.SetViewportAction.create(viewport.id, newViewport, { animate: true });
    }
};
exports.MoveViewportHandler = MoveViewportHandler;
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], MoveViewportHandler.prototype, "editorContextService", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], MoveViewportHandler.prototype, "dispatcher", void 0);
exports.MoveViewportHandler = MoveViewportHandler = __decorate([
    (0, inversify_1.injectable)()
], MoveViewportHandler);
/* The MoveElementHandler class is an implementation of the IActionHandler interface that handles
moving elements. */
let MoveElementHandler = class MoveElementHandler {
    constructor() {
        this.throttledHandleElementMove = (0, lodash_1.throttle)((action) => this.handleMoveElement(action), 150);
    }
    handle(action) {
        if (MoveElementAction.is(action)) {
            this.throttledHandleElementMove(action);
        }
    }
    handleMoveElement(action) {
        const viewport = (0, sprotty_1.findParentByFeature)(this.editorContextService.modelRoot, sprotty_1.isViewport);
        if (!viewport) {
            return;
        }
        const elements = (0, gmodel_util_1.getElements)(this.editorContextService.modelRoot.index, action.elementIds, gmodel_util_1.isSelectableAndBoundsAware);
        this.dispatcher.dispatchAll(this.move(viewport, elements, action.moveX, action.moveY));
    }
    getBounds(element, offSetX, offSetY) {
        return { x: element.bounds.x + offSetX, y: element.bounds.y + offSetY };
    }
    adaptViewport(viewport, newPoint, moveX, moveY) {
        if (newPoint.x < viewport.scroll.x ||
            newPoint.x > viewport.scroll.x + viewport.canvasBounds.width ||
            newPoint.y < viewport.scroll.y ||
            newPoint.y > viewport.scroll.y + viewport.canvasBounds.height) {
            return MoveViewportAction.create(moveX, moveY);
        }
        return;
    }
    moveElement(element, offSetX, offSetY) {
        return sprotty_1.ChangeBoundsOperation.create([
            {
                elementId: element.id,
                newSize: {
                    width: element.bounds.width,
                    height: element.bounds.height
                },
                newPosition: {
                    x: element.bounds.x + offSetX,
                    y: element.bounds.y + offSetY
                }
            }
        ]);
    }
    move(viewport, selectedElements, deltaX, deltaY) {
        const results = [];
        if (selectedElements.length !== 0) {
            selectedElements.forEach(currentElement => {
                results.push(this.moveElement(currentElement, deltaX, deltaY));
                const newPosition = this.getBounds(currentElement, deltaX, deltaY);
                const viewportAction = this.adaptViewport(viewport, newPosition, deltaX, deltaY);
                if (viewportAction) {
                    results.push(viewportAction);
                }
            });
        }
        return results;
    }
};
exports.MoveElementHandler = MoveElementHandler;
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], MoveElementHandler.prototype, "editorContextService", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], MoveElementHandler.prototype, "dispatcher", void 0);
exports.MoveElementHandler = MoveElementHandler = __decorate([
    (0, inversify_1.injectable)()
], MoveElementHandler);
//# sourceMappingURL=move-handler.js.map
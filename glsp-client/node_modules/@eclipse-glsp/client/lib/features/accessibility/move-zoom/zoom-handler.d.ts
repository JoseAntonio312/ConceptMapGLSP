/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Action, Bounds, IActionDispatcher, IActionHandler, ICommand, Point, GModelElement, GModelRoot, SetViewportAction, Viewport } from '@eclipse-glsp/sprotty';
import { EditorContextService } from '../../../base/editor-context-service';
import { SelectableBoundsAware } from '../../../utils/gmodel-util';
/**
 * Action for triggering zooming of the viewport.
 */
export interface ZoomViewportAction extends Action {
    kind: typeof ZoomViewportAction.KIND;
    /**
     * used to specify the amount by which the viewport should be zoomed
     */
    zoomFactor: number;
}
export declare namespace ZoomViewportAction {
    const KIND = "zoomViewportAction";
    function is(object: any): object is ZoomViewportAction;
    function create(zoomFactor: number): ZoomViewportAction;
}
/**
 * Action for triggering zooming of the elements..
 */
export interface ZoomElementAction extends Action {
    kind: typeof ZoomElementAction.KIND;
    /**
     * used to specify the elements to be zoomed in/out
     */
    elementIds: string[];
    /**
     * used to specify the amount by which the viewport should be zoomed
     */
    zoomFactor: number;
}
export declare namespace ZoomElementAction {
    const KIND = "zoomElementAction";
    function is(object: any): object is ZoomElementAction;
    function create(elementIds: string[], zoomFactor: number): ZoomElementAction;
}
export declare class ZoomViewportHandler implements IActionHandler {
    protected editorContextService: EditorContextService;
    static readonly defaultZoomInFactor = 1.1;
    static readonly defaultZoomOutFactor = 0.9;
    protected dispatcher: IActionDispatcher;
    protected readonly throttledHandleViewportZoom: import("lodash").DebouncedFunc<(action: ZoomViewportAction) => void>;
    handle(action: Action): void;
    handleZoomViewport(action: ZoomViewportAction): void;
    protected setNewZoomFactor(viewport: GModelRoot & Viewport, zoomFactor: number): SetViewportAction;
}
export declare class ZoomElementHandler implements IActionHandler {
    protected editorContextService: EditorContextService;
    protected dispatcher: IActionDispatcher;
    protected readonly throttledHandleElementZoom: import("lodash").DebouncedFunc<(action: ZoomElementAction) => void>;
    handle(action: Action): void | Action | ICommand;
    handleZoomElement(action: ZoomElementAction): void;
    protected getCenter(viewport: GModelRoot & Viewport, selectedElements: SelectableBoundsAware[]): Point;
    protected boundsInViewport(viewport: GModelRoot & Viewport, element: GModelElement, bounds: Bounds): Bounds;
    protected setNewZoomFactor(viewport: GModelRoot & Viewport, zoomFactor: number, point: Point): SetViewportAction;
}
//# sourceMappingURL=zoom-handler.d.ts.map
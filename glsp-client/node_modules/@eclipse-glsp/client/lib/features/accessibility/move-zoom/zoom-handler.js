"use strict";
/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZoomElementHandler = exports.ZoomViewportHandler = exports.ZoomElementAction = exports.ZoomViewportAction = void 0;
const inversify_1 = require("inversify");
const lodash_1 = require("lodash");
const sprotty_1 = require("@eclipse-glsp/sprotty");
const editor_context_service_1 = require("../../../base/editor-context-service");
const gmodel_util_1 = require("../../../utils/gmodel-util");
var ZoomViewportAction;
(function (ZoomViewportAction) {
    ZoomViewportAction.KIND = 'zoomViewportAction';
    function is(object) {
        return sprotty_1.Action.hasKind(object, ZoomViewportAction.KIND);
    }
    ZoomViewportAction.is = is;
    function create(zoomFactor) {
        return { kind: ZoomViewportAction.KIND, zoomFactor };
    }
    ZoomViewportAction.create = create;
})(ZoomViewportAction || (exports.ZoomViewportAction = ZoomViewportAction = {}));
var ZoomElementAction;
(function (ZoomElementAction) {
    ZoomElementAction.KIND = 'zoomElementAction';
    function is(object) {
        return sprotty_1.Action.hasKind(object, ZoomElementAction.KIND);
    }
    ZoomElementAction.is = is;
    function create(elementIds, zoomFactor) {
        return { kind: ZoomElementAction.KIND, elementIds, zoomFactor };
    }
    ZoomElementAction.create = create;
})(ZoomElementAction || (exports.ZoomElementAction = ZoomElementAction = {}));
/* The ZoomViewportHandler class is an implementation of the IActionHandler interface that handles
zooming in and out of a viewport. */
let ZoomViewportHandler = class ZoomViewportHandler {
    constructor() {
        this.throttledHandleViewportZoom = (0, lodash_1.throttle)((action) => this.handleZoomViewport(action), 150);
    }
    handle(action) {
        if (ZoomViewportAction.is(action)) {
            this.throttledHandleViewportZoom(action);
        }
    }
    handleZoomViewport(action) {
        const viewport = (0, sprotty_1.findParentByFeature)(this.editorContextService.modelRoot, sprotty_1.isViewport);
        if (!viewport) {
            return;
        }
        this.dispatcher.dispatch(this.setNewZoomFactor(viewport, action.zoomFactor));
    }
    setNewZoomFactor(viewport, zoomFactor) {
        const newZoom = viewport.zoom * zoomFactor;
        const newViewport = {
            scroll: viewport.scroll,
            zoom: newZoom
        };
        return sprotty_1.SetViewportAction.create(viewport.id, newViewport, { animate: true });
    }
};
exports.ZoomViewportHandler = ZoomViewportHandler;
ZoomViewportHandler.defaultZoomInFactor = 1.1;
ZoomViewportHandler.defaultZoomOutFactor = 0.9;
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], ZoomViewportHandler.prototype, "editorContextService", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], ZoomViewportHandler.prototype, "dispatcher", void 0);
exports.ZoomViewportHandler = ZoomViewportHandler = __decorate([
    (0, inversify_1.injectable)()
], ZoomViewportHandler);
/* The ZoomElementHandler class is an implementation of the IActionHandler interface that handles
zooming in and out of elements. */
let ZoomElementHandler = class ZoomElementHandler {
    constructor() {
        this.throttledHandleElementZoom = (0, lodash_1.throttle)((action) => this.handleZoomElement(action), 150);
    }
    handle(action) {
        if (ZoomElementAction.is(action)) {
            this.throttledHandleElementZoom(action);
        }
    }
    handleZoomElement(action) {
        const viewport = (0, sprotty_1.findParentByFeature)(this.editorContextService.modelRoot, sprotty_1.isViewport);
        if (!viewport) {
            return;
        }
        const elements = (0, gmodel_util_1.getElements)(this.editorContextService.modelRoot.index, action.elementIds, gmodel_util_1.isSelectableAndBoundsAware);
        const center = this.getCenter(viewport, elements);
        this.dispatcher.dispatch(this.setNewZoomFactor(viewport, action.zoomFactor, center));
    }
    getCenter(viewport, selectedElements) {
        // Get bounds of elements based on the viewport
        const allBounds = selectedElements.map(e => this.boundsInViewport(viewport, e, e.bounds));
        const mergedBounds = allBounds.reduce((b0, b1) => sprotty_1.Bounds.combine(b0, b1));
        return sprotty_1.Bounds.center(mergedBounds);
    }
    // copy from center-fit.ts, translates the children bounds to the viewport bounds
    boundsInViewport(viewport, element, bounds) {
        if (element instanceof sprotty_1.GChildElement && element.parent !== viewport) {
            return this.boundsInViewport(viewport, element.parent, element.parent.localToParent(bounds));
        }
        else {
            return bounds;
        }
    }
    setNewZoomFactor(viewport, zoomFactor, point) {
        const newZoom = viewport.zoom * zoomFactor;
        const newViewport = {
            scroll: {
                x: point.x - (0.5 * viewport.canvasBounds.width) / newZoom,
                y: point.y - (0.5 * viewport.canvasBounds.height) / newZoom
            },
            zoom: newZoom
        };
        return sprotty_1.SetViewportAction.create(viewport.id, newViewport, { animate: true });
    }
};
exports.ZoomElementHandler = ZoomElementHandler;
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], ZoomElementHandler.prototype, "editorContextService", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], ZoomElementHandler.prototype, "dispatcher", void 0);
exports.ZoomElementHandler = ZoomElementHandler = __decorate([
    (0, inversify_1.injectable)()
], ZoomElementHandler);
//# sourceMappingURL=zoom-handler.js.map
import { GModelElement, GModelRoot, LabeledAction, IActionHandler, Action, TriggerEdgeCreationAction } from '@eclipse-glsp/sprotty';
import { EdgeAutocompleteContext } from './edge-autocomplete-context';
import { SearchAutocompletePalette } from '../search/search-palette';
import { CloseReason } from '../../../base/auto-complete/auto-complete-widget';
import { AutocompleteSuggestion, IAutocompleteSuggestionProvider } from '../../../base/auto-complete/autocomplete-suggestion-providers';
import { GEdge } from '../../../model';
export declare namespace EdgeAutocompletePaletteMetadata {
    const ID = "edge-autocomplete-palette";
}
export declare class EdgeAutocompletePalette extends SearchAutocompletePalette implements IActionHandler {
    protected context?: EdgeAutocompleteContext;
    protected readonly targetSuggestionProvider: PossibleEdgeTargetAutocompleteSuggestionProvider;
    id(): string;
    handle(action: Action): Action | void;
    protected onBeforeShow(containerElement: HTMLElement, root: Readonly<GModelRoot>, ...contextElementIds: string[]): void;
    protected getSuggestionProviders(root: Readonly<GModelRoot>, input: string): IAutocompleteSuggestionProvider[];
    protected reload(): void;
    protected executeSuggestion(input: LabeledAction | Action[] | Action): void;
    protected autocompleteHide(reason: CloseReason): void;
}
export declare class PossibleEdgeTargetAutocompleteSuggestionProvider implements IAutocompleteSuggestionProvider {
    protected proxyEdge?: GEdge;
    protected context?: EdgeAutocompleteContext;
    setContext(triggerAction: TriggerEdgeCreationAction, edgeAutocompleteContext: EdgeAutocompleteContext): void;
    isAllowedSource(element: GModelElement | undefined, role: 'source' | 'target'): boolean;
    retrieveSuggestions(root: Readonly<GModelRoot>, text: string): Promise<AutocompleteSuggestion[]>;
}
//# sourceMappingURL=edge-autocomplete-palette.d.ts.map
"use strict";
/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var AccessibleKeyShortcutTool_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessibleShortcutKeyListener = exports.AccessibleKeyShortcutTool = void 0;
const inversify_1 = require("inversify");
const sprotty_1 = require("@eclipse-glsp/sprotty");
const base_tools_1 = require("../../tools/base-tools");
const accessible_key_shortcut_1 = require("./accessible-key-shortcut");
let AccessibleKeyShortcutTool = AccessibleKeyShortcutTool_1 = class AccessibleKeyShortcutTool extends base_tools_1.BaseEditTool {
    constructor() {
        super(...arguments);
        this.shortcutKeyListener = new AccessibleShortcutKeyListener();
    }
    get id() {
        return AccessibleKeyShortcutTool_1.ID;
    }
    enable() {
        this.keytool.register(this.shortcutKeyListener);
    }
    disable() {
        this.keytool.deregister(this.shortcutKeyListener);
    }
};
exports.AccessibleKeyShortcutTool = AccessibleKeyShortcutTool;
AccessibleKeyShortcutTool.ID = 'accessible-key-shortcut-tool';
__decorate([
    (0, inversify_1.inject)(sprotty_1.KeyTool),
    __metadata("design:type", sprotty_1.KeyTool)
], AccessibleKeyShortcutTool.prototype, "keytool", void 0);
exports.AccessibleKeyShortcutTool = AccessibleKeyShortcutTool = AccessibleKeyShortcutTool_1 = __decorate([
    (0, inversify_1.injectable)()
], AccessibleKeyShortcutTool);
class AccessibleShortcutKeyListener extends sprotty_1.KeyListener {
    constructor() {
        super(...arguments);
        this.token = Symbol(AccessibleShortcutKeyListener.name);
    }
    keyDown(element, event) {
        if (this.matchesActivateShortcutHelpKeystroke(event)) {
            return [sprotty_1.SetUIExtensionVisibilityAction.create({ extensionId: accessible_key_shortcut_1.KeyShortcutUIExtension.ID, visible: true })];
        }
        return [];
    }
    matchesActivateShortcutHelpKeystroke(event) {
        return (0, sprotty_1.matchesKeystroke)(event, 'KeyH', 'alt');
    }
}
exports.AccessibleShortcutKeyListener = AccessibleShortcutKeyListener;
//# sourceMappingURL=accessible-key-shortcut-tool.js.map
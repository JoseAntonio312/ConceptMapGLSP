/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { AbstractUIExtension, Action, IActionHandler, ICommand, GModelRoot } from '@eclipse-glsp/sprotty';
export interface AccessibleKeyShortcutProvider {
    registerShortcutKey(): void;
}
export interface AccessibleKeyShortcut {
    shortcuts: string[];
    description: string;
    group: string;
    position: number;
}
export interface SetAccessibleKeyShortcutAction extends Action {
    kind: typeof SetAccessibleKeyShortcutAction.KIND;
    token: string;
    keys: AccessibleKeyShortcut[];
}
export declare namespace SetAccessibleKeyShortcutAction {
    const KIND = "setAccessibleKeyShortcut";
    function is(object: any): object is SetAccessibleKeyShortcutAction;
    function create(options: {
        token: string;
        keys: AccessibleKeyShortcut[];
    }): SetAccessibleKeyShortcutAction;
}
export declare class KeyShortcutUIExtension extends AbstractUIExtension implements IActionHandler {
    static readonly ID = "key-shortcut";
    protected container: HTMLDivElement;
    protected shortcutsContainer: HTMLDivElement;
    protected registrations: Record<string, AccessibleKeyShortcut[]>;
    handle(action: Action): ICommand | Action | void;
    id(): string;
    containerClass(): string;
    show(root: Readonly<GModelRoot>, ...contextElementIds: string[]): void;
    protected refreshUI(): void;
    protected createGroupHeader(group: string): HTMLElement;
    protected getShortcutHTML(shortcuts: string[]): HTMLElement;
    protected createEntry(registration: AccessibleKeyShortcut): HTMLDivElement;
    protected initializeContents(containerElement: HTMLElement): void;
}
//# sourceMappingURL=accessible-key-shortcut.d.ts.map
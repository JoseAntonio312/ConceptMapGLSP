/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Action, KeyListener, KeyTool, Point, GModelElement, GModelRoot, SetViewportAction, Viewport } from '@eclipse-glsp/sprotty';
import { GLSPActionDispatcher } from '../../../base/action-dispatcher';
import { SelectionService } from '../../../base/selection-service';
import { Tool } from '../../../base/tool-manager/tool';
import { EditorContextService } from '../../../base/editor-context-service';
/**
 * Zoom viewport and elements when its focused and arrow keys are hit.
 */
export declare class ZoomKeyTool implements Tool {
    static ID: string;
    isEditTool: boolean;
    protected readonly zoomKeyListener: ZoomKeyListener;
    protected readonly keytool: KeyTool;
    readonly actionDispatcher: GLSPActionDispatcher;
    selectionService: SelectionService;
    protected editorContextService: EditorContextService;
    get id(): string;
    enable(): void;
    disable(): void;
    handle(action: Action): Action | void;
}
export declare class ZoomKeyListener extends KeyListener {
    protected tool: ZoomKeyTool;
    static readonly defaultZoomInFactor = 1.1;
    static readonly defaultZoomOutFactor = 0.9;
    protected readonly token: string;
    constructor(tool: ZoomKeyTool);
    registerShortcutKey(): void;
    setNewZoomFactor(viewport: GModelElement & GModelRoot & Viewport, zoomFactor: number, point?: Point): SetViewportAction;
    keyDown(element: GModelElement, event: KeyboardEvent): Action[];
    protected matchesZoomInKeystroke(event: KeyboardEvent): boolean;
    protected matchesZoomViaGrid(event: KeyboardEvent): boolean;
    protected matchesMinZoomLevelKeystroke(event: KeyboardEvent): boolean;
    protected matchesZoomOutKeystroke(event: KeyboardEvent): boolean;
}
//# sourceMappingURL=zoom-key-tool.d.ts.map
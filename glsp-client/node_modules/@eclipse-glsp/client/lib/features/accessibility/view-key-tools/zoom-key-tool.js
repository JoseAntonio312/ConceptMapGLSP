"use strict";
/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var ZoomKeyTool_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZoomKeyListener = exports.ZoomKeyTool = void 0;
const inversify_1 = require("inversify");
const keyboard_1 = require("sprotty/lib/utils/keyboard");
const sprotty_1 = require("@eclipse-glsp/sprotty");
const action_dispatcher_1 = require("../../../base/action-dispatcher");
const selection_service_1 = require("../../../base/selection-service");
const accessible_key_shortcut_1 = require("../key-shortcut/accessible-key-shortcut");
const zoom_handler_1 = require("../move-zoom/zoom-handler");
const action_1 = require("../keyboard-grid/action");
const viewpoint_util_1 = require("../../../utils/viewpoint-util");
const editor_context_service_1 = require("../../../base/editor-context-service");
const toast_handler_1 = require("../toast/toast-handler");
const diagram_navigation_tool_1 = require("../element-navigation/diagram-navigation-tool");
const messages = require("../toast/messages.json");
/**
 * Zoom viewport and elements when its focused and arrow keys are hit.
 */
let ZoomKeyTool = ZoomKeyTool_1 = class ZoomKeyTool {
    constructor() {
        this.isEditTool = false;
        this.zoomKeyListener = new ZoomKeyListener(this);
    }
    get id() {
        return ZoomKeyTool_1.ID;
    }
    enable() {
        this.keytool.register(this.zoomKeyListener);
        this.zoomKeyListener.registerShortcutKey();
    }
    disable() {
        this.keytool.deregister(this.zoomKeyListener);
    }
    handle(action) {
        if ((0, sprotty_1.isViewport)(this.editorContextService.modelRoot)) {
            let viewportAction = undefined;
            if (action_1.KeyboardGridCellSelectedAction.is(action) && action.options.originId === ZoomKeyTool_1.ID) {
                viewportAction = this.zoomKeyListener.setNewZoomFactor(this.editorContextService.modelRoot, ZoomKeyListener.defaultZoomInFactor, (0, viewpoint_util_1.getAbsolutePositionByPoint)(this.editorContextService.modelRoot, action.options.centerCellPosition));
            }
            else if (action_1.KeyboardGridKeyboardEventAction.is(action) && action.options.originId === ZoomKeyTool_1.ID) {
                if ((0, keyboard_1.matchesKeystroke)(action.options.event, 'Minus')) {
                    viewportAction = this.zoomKeyListener.setNewZoomFactor(this.editorContextService.modelRoot, ZoomKeyListener.defaultZoomOutFactor);
                }
                else if ((0, keyboard_1.matchesKeystroke)(action.options.event, 'Digit0', 'ctrl')) {
                    viewportAction = sprotty_1.CenterAction.create([]);
                }
            }
            if (viewportAction) {
                this.actionDispatcher.dispatchAll([
                    viewportAction,
                    toast_handler_1.HideToastAction.create({ id: Symbol.for(diagram_navigation_tool_1.ElementNavigatorKeyListener.name) })
                ]);
            }
        }
    }
};
exports.ZoomKeyTool = ZoomKeyTool;
ZoomKeyTool.ID = 'glsp.zoom-key-tool';
__decorate([
    (0, inversify_1.inject)(sprotty_1.KeyTool),
    __metadata("design:type", sprotty_1.KeyTool)
], ZoomKeyTool.prototype, "keytool", void 0);
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IActionDispatcher),
    __metadata("design:type", action_dispatcher_1.GLSPActionDispatcher)
], ZoomKeyTool.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(selection_service_1.SelectionService),
    __metadata("design:type", selection_service_1.SelectionService)
], ZoomKeyTool.prototype, "selectionService", void 0);
__decorate([
    (0, inversify_1.inject)(editor_context_service_1.EditorContextService),
    __metadata("design:type", editor_context_service_1.EditorContextService)
], ZoomKeyTool.prototype, "editorContextService", void 0);
exports.ZoomKeyTool = ZoomKeyTool = ZoomKeyTool_1 = __decorate([
    (0, inversify_1.injectable)()
], ZoomKeyTool);
class ZoomKeyListener extends sprotty_1.KeyListener {
    constructor(tool) {
        super();
        this.tool = tool;
        this.token = ZoomKeyListener.name;
    }
    registerShortcutKey() {
        this.tool.actionDispatcher.dispatchOnceModelInitialized(accessible_key_shortcut_1.SetAccessibleKeyShortcutAction.create({
            token: this.token,
            keys: [
                { shortcuts: ['+'], description: 'Zoom in to element or viewport', group: 'Zoom', position: 0 },
                { shortcuts: ['-'], description: 'Zoom out to element or viewport', group: 'Zoom', position: 1 },
                { shortcuts: ['CTRL', '0'], description: 'Reset zoom to default', group: 'Zoom', position: 2 },
                { shortcuts: ['CTRL', '+'], description: 'Zoom in via Grid', group: 'Zoom', position: 3 }
            ]
        }));
    }
    setNewZoomFactor(viewport, zoomFactor, point) {
        let newViewport;
        const newZoom = viewport.zoom * zoomFactor;
        if (point) {
            newViewport = {
                scroll: {
                    x: point.x - (0.5 * viewport.canvasBounds.width) / newZoom,
                    y: point.y - (0.5 * viewport.canvasBounds.height) / newZoom
                },
                zoom: newZoom
            };
        }
        else {
            newViewport = {
                scroll: viewport.scroll,
                zoom: newZoom
            };
        }
        return sprotty_1.SetViewportAction.create(viewport.id, newViewport, { animate: true });
    }
    keyDown(element, event) {
        const selectedElementIds = this.tool.selectionService.getSelectedElementIDs();
        if (this.matchesZoomViaGrid(event)) {
            return [
                action_1.EnableKeyboardGridAction.create({
                    originId: ZoomKeyTool.ID,
                    triggerActions: []
                }),
                toast_handler_1.ShowToastMessageAction.createWithTimeout({
                    id: Symbol.for(diagram_navigation_tool_1.ElementNavigatorKeyListener.name),
                    message: messages.grid.zoom_in_grid
                })
            ];
        }
        else if (this.matchesZoomOutKeystroke(event)) {
            if (selectedElementIds.length > 0) {
                return [zoom_handler_1.ZoomElementAction.create(selectedElementIds, ZoomKeyListener.defaultZoomOutFactor)];
            }
            else {
                return [zoom_handler_1.ZoomViewportAction.create(ZoomKeyListener.defaultZoomOutFactor)];
            }
        }
        else if (this.matchesZoomInKeystroke(event)) {
            if (selectedElementIds.length > 0) {
                return [zoom_handler_1.ZoomElementAction.create(selectedElementIds, ZoomKeyListener.defaultZoomInFactor)];
            }
            else {
                return [zoom_handler_1.ZoomViewportAction.create(ZoomKeyListener.defaultZoomInFactor)];
            }
        }
        else if (this.matchesMinZoomLevelKeystroke(event)) {
            return [sprotty_1.CenterAction.create(selectedElementIds)];
        }
        return [];
    }
    matchesZoomInKeystroke(event) {
        /** here event.key is used for '+', as keycode 187 is already declared for 'Equals' in {@link matchesKeystroke}.*/
        return event.key === '+' || (0, keyboard_1.matchesKeystroke)(event, 'NumpadAdd');
    }
    matchesZoomViaGrid(event) {
        return event.key === '+' && event.ctrlKey;
    }
    matchesMinZoomLevelKeystroke(event) {
        return (0, keyboard_1.matchesKeystroke)(event, 'Digit0', 'ctrl') || (0, keyboard_1.matchesKeystroke)(event, 'Numpad0', 'ctrl');
    }
    matchesZoomOutKeystroke(event) {
        return (0, keyboard_1.matchesKeystroke)(event, 'Minus') || (0, keyboard_1.matchesKeystroke)(event, 'NumpadSubtract');
    }
}
exports.ZoomKeyListener = ZoomKeyListener;
ZoomKeyListener.defaultZoomInFactor = 1.1;
ZoomKeyListener.defaultZoomOutFactor = 0.9;
//# sourceMappingURL=zoom-key-tool.js.map
"use strict";
/********************************************************************************
 * Copyright (c) 2023 Business Informatics Group (TU Wien) and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var DeselectKeyTool_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeselectKeyListener = exports.DeselectKeyTool = void 0;
const inversify_1 = require("inversify");
const iterable_1 = require("sprotty/lib/utils/iterable");
const keyboard_1 = require("sprotty/lib/utils/keyboard");
const sprotty_1 = require("@eclipse-glsp/sprotty");
const model_1 = require("../../change-bounds/model");
/**
 * Deselects the element if there is no interaction possible with element.
 */
let DeselectKeyTool = DeselectKeyTool_1 = class DeselectKeyTool {
    constructor() {
        this.isEditTool = true;
        this.deselectKeyListener = new DeselectKeyListener();
    }
    get id() {
        return DeselectKeyTool_1.ID;
    }
    enable() {
        this.keytool.register(this.deselectKeyListener);
    }
    disable() {
        this.keytool.deregister(this.deselectKeyListener);
    }
};
exports.DeselectKeyTool = DeselectKeyTool;
DeselectKeyTool.ID = 'glsp.deselect-key-tool';
__decorate([
    (0, inversify_1.inject)(sprotty_1.KeyTool),
    __metadata("design:type", sprotty_1.KeyTool)
], DeselectKeyTool.prototype, "keytool", void 0);
exports.DeselectKeyTool = DeselectKeyTool = DeselectKeyTool_1 = __decorate([
    (0, inversify_1.injectable)()
], DeselectKeyTool);
class DeselectKeyListener extends sprotty_1.KeyListener {
    keyDown(target, event) {
        if (this.matchesDeselectKeystroke(event)) {
            const isResizeHandleActive = (0, iterable_1.toArray)(target.root.index.all().filter(el => el instanceof model_1.SResizeHandle)).length > 0;
            if (isResizeHandleActive) {
                return [];
            }
            const deselect = (0, iterable_1.toArray)(target.root.index.all().filter(element => (0, sprotty_1.isSelectable)(element) && element.selected));
            const actions = [];
            if (deselect.length > 0) {
                actions.push(sprotty_1.SelectAction.create({ deselectedElementsIDs: deselect.map(e => e.id) }));
            }
            const routableDeselect = deselect.filter(e => e instanceof sprotty_1.GRoutableElement).map(e => e.id);
            if (routableDeselect.length > 0) {
                actions.push(sprotty_1.SwitchEditModeAction.create({ elementsToDeactivate: routableDeselect }));
            }
            return actions;
        }
        return [];
    }
    matchesDeselectKeystroke(event) {
        return (0, keyboard_1.matchesKeystroke)(event, 'Escape');
    }
}
exports.DeselectKeyListener = DeselectKeyListener;
//# sourceMappingURL=deselect-key-tool.js.map